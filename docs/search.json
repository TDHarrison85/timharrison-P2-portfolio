[
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Tim Harrison Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/Synth_Data.html",
    "href": "starter-analysis-exercise/data/raw-data/Synth_Data.html",
    "title": "Synth_Data",
    "section": "",
    "text": "# Load necessary libraries\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6      ✔ rsample      1.2.1 \n✔ dials        1.2.1      ✔ tune         1.2.1 \n✔ infer        1.0.7      ✔ workflows    1.1.4 \n✔ modeldata    1.4.0      ✔ workflowsets 1.1.0 \n✔ parsnip      1.2.1      ✔ yardstick    1.3.1 \n✔ recipes      1.0.10     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nlibrary(here)\n\nhere() starts at /Users/timothyharrison/Desktop/timharrison-P2-portfolio\n\n# Set seed for reproducibility\nset.seed(42)\n\n# Number of observations\nn &lt;- 10000\n\n# Generate synthetic data\ndf &lt;- tibble(\n  `Customer ID` = 1:n,\n  `Customer Tenure (years)` = rpois(n, lambda = 5),\n  `Deposit Balance ($)` = pmax(rnorm(n, mean = 5000, sd = 2000), 0),\n  `Gross Monthly Income ($)` = round(pmax(rnorm(n, mean = 3000, sd = 1000), 0), 2),\n  `BNPL Amount 3m ($)` = 0,\n  `BNPL Amount 6m ($)` = 0,\n  `BNPL Amount 9m ($)` = 0,\n  `BNPL Amount 12m ($)` = 0,\n  `Overdraft History` = pmin(rpois(n, lambda = 0.5), 10),\n  `FICO Score` = sample(c(rnorm(n * 0.5, mean = 730, sd = 20), rnorm(n * 0.5, mean = 650, sd = 20)), n, replace = TRUE),\n  `Current Credit Obligations ($)` = pmax(rnorm(n, mean = 10000, sd = 5000), 0),\n  `Payment Timeliness 30+` = 0,\n  `Payment Timeliness 60+` = 0,\n  `Payment Timeliness 90+` = 0,\n  `Debt Write-off` = 0,\n  `Credit Inquiries` = pmin(rpois(n, lambda = 1), 10),\n  `Years Since Bankruptcy` = sample(c(rep(NA, 90), sample(0:6, 10, replace = TRUE)), n, replace = TRUE),\n  `Employment Status` = sample(c(\"Employed\", \"Unemployed\", \"Retired\", \"Student\"), n, replace = TRUE, prob = c(0.65, 0.15, 0.1, 0.1)),\n  `Open Credit Accounts` = sample(1:10, n, replace = TRUE)\n)\n\n# Adjust Payment Timeliness and FICO Score based on dependencies\nfor (i in 1:n) {\n  if (!is.na(df$`Years Since Bankruptcy`[i]) && df$`Years Since Bankruptcy`[i] &lt; 1) {\n    df$`FICO Score`[i] &lt;- sample(300:600, 1)\n  } else if (!is.na(df$`Years Since Bankruptcy`[i])) {\n    df$`FICO Score`[i] &lt;- sample(600:700, 1)\n  }\n  \n  df$`Payment Timeliness 90+`[i] &lt;- pmin(rpois(1, lambda = 0.2), 10)\n  df$`Payment Timeliness 60+`[i] &lt;- df$`Payment Timeliness 90+`[i] + pmin(rpois(1, lambda = 0.3), 10 - df$`Payment Timeliness 90+`[i])\n  df$`Payment Timeliness 30+`[i] &lt;- df$`Payment Timeliness 60+`[i] + pmin(rpois(1, lambda = 0.5), 10 - df$`Payment Timeliness 60+`[i])\n  df$`Debt Write-off`[i] &lt;- df$`Payment Timeliness 90+`[i] &gt; 0\n  \n  # Adjust FICO Score based on Payment Timeliness\n  df$`FICO Score`[i] &lt;- df$`FICO Score`[i] - (df$`Payment Timeliness 30+`[i] * 10 + df$`Payment Timeliness 60+`[i] * 7 + df$`Payment Timeliness 90+`[i] * 5)\n  df$`FICO Score`[i] &lt;- max(300, df$`FICO Score`[i])  # Ensure FICO score is at least 300\n  \n  # Adjust Current Credit Obligations to be the sum of open credit accounts\n  df$`Current Credit Obligations ($)`[i] &lt;- sum(pmax(rnorm(df$`Open Credit Accounts`[i], mean = 2000, sd = 1000), 0))\n}\n\n# Introduce dependencies for BNPL Amounts to create additional clusters\nfor (i in 1:n) {\n  if (df$`FICO Score`[i] &lt; 660) {\n    if (runif(1) &lt; 0.5) {\n      df$`BNPL Amount 3m ($)`[i] &lt;- pmax(rnorm(1, mean = 500, sd = 200), 0)\n      df$`BNPL Amount 6m ($)`[i] &lt;- pmax(rnorm(1, mean = 700, sd = 300), 0)\n      df$`BNPL Amount 9m ($)`[i] &lt;- pmax(rnorm(1, mean = 900, sd = 400), 0)\n      df$`BNPL Amount 12m ($)`[i] &lt;- pmax(rnorm(1, mean = 1000, sd = 500), 0)\n      df$`Payment Timeliness 90+`[i] &lt;- pmin(rpois(1, lambda = 1), 10)  # Higher payment timeliness issues\n      if (runif(1) &lt; 0.33) {\n        df$`Debt Write-off`[i] &lt;- 1  # Increased likelihood of debt write-off\n      }\n    } else {\n      df$`BNPL Amount 3m ($)`[i] &lt;- 0\n      df$`BNPL Amount 6m ($)`[i] &lt;- 0\n      df$`BNPL Amount 9m ($)`[i] &lt;- 0\n      df$`BNPL Amount 12m ($)`[i] &lt;- 0\n    }\n  } else if (df$`FICO Score`[i] &gt; 700 && df$`Current Credit Obligations ($)`[i] &lt; 5000) {\n    df$`BNPL Amount 3m ($)`[i] &lt;- 0\n    df$`BNPL Amount 6m ($)`[i] &lt;- 0\n    df$`BNPL Amount 9m ($)`[i] &lt;- 0\n    df$`BNPL Amount 12m ($)`[i] &lt;- 0\n  }\n}\n\n# Save the generated data to CSV\nwrite_csv(df, \"synthetic_financial_data_recreated.csv\")\n\n# Output the first few rows of the dataframe to verify\nprint(head(df))\n\n# A tibble: 6 × 19\n  `Customer ID` `Customer Tenure (years)` `Deposit Balance ($)`\n          &lt;int&gt;                     &lt;int&gt;                 &lt;dbl&gt;\n1             1                         8                 5142.\n2             2                         9                 6941.\n3             3                         4                 5620.\n4             4                         7                 4721.\n5             5                         6                 4347.\n6             6                         5                 4762.\n# ℹ 16 more variables: `Gross Monthly Income ($)` &lt;dbl&gt;,\n#   `BNPL Amount 3m ($)` &lt;dbl&gt;, `BNPL Amount 6m ($)` &lt;dbl&gt;,\n#   `BNPL Amount 9m ($)` &lt;dbl&gt;, `BNPL Amount 12m ($)` &lt;dbl&gt;,\n#   `Overdraft History` &lt;dbl&gt;, `FICO Score` &lt;dbl&gt;,\n#   `Current Credit Obligations ($)` &lt;dbl&gt;, `Payment Timeliness 30+` &lt;dbl&gt;,\n#   `Payment Timeliness 60+` &lt;dbl&gt;, `Payment Timeliness 90+` &lt;dbl&gt;,\n#   `Debt Write-off` &lt;dbl&gt;, `Credit Inquiries` &lt;dbl&gt;, …"
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Tim Harrison Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/timothyharrison/Desktop/timharrison-P2-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n4 Hair            color of hair                         red, brown, blonde    \n5 BMI             Body Mass Index                       0 to 1                \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n$ Hair   &lt;chr&gt; \"Red\", \"Brown\", \"Brown\", \"Blonde\", \"Grey\", \"Red\", \"Brown\", \"Bro…\n$ BMI    &lt;dbl&gt; 0.20, 0.20, 0.20, 0.10, 0.08, 0.09, 0.20, 0.20, 0.20, 0.10, 0.0…\n\nsummary(rawdata)\n\n    Height              Weight          Gender              Hair          \n Length:14          Min.   :  45.0   Length:14          Length:14         \n Class :character   1st Qu.:  55.0   Class :character   Class :character  \n Mode  :character   Median :  70.0   Mode  :character   Mode  :character  \n                    Mean   : 602.7                                        \n                    3rd Qu.:  90.0                                        \n                    Max.   :7000.0                                        \n                    NA's   :1                                             \n      BMI        \n Min.   :0.0800  \n 1st Qu.:0.0925  \n Median :0.2000  \n Mean   :0.1800  \n 3rd Qu.:0.2000  \n Max.   :0.5500  \n                 \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Hair     BMI\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt;\n1 180        80 M      Red     0.2 \n2 175        70 O      Brown   0.2 \n3 sixty      60 F      Brown   0.2 \n4 178        76 F      Blonde  0.1 \n5 192        90 NA     Grey    0.08\n6 6          55 F      Red     0.09\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHair\n0\n1\n3\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45.00\n55.00\n70.0\n90.0\n7000.00\n▇▁▁▁▁\n\n\nBMI\n0\n1.00\n0.18\n0.12\n0.08\n0.09\n0.2\n0.2\n0.55\n▇▇▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHair\n0\n1\n3\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6.00\n154.00\n165.0\n175.0\n192.00\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45.00\n54.75\n73.0\n90.0\n7000.00\n▇▁▁▁▁\n\n\nBMI\n0\n1.00\n0.18\n0.13\n0.08\n0.09\n0.2\n0.2\n0.55\n▇▇▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHair\n0\n1\n3\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133.00\n155.00\n166.0\n178.0\n192.00\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45.00\n54.75\n73.0\n90.0\n7000.00\n▇▁▁▁▁\n\n\nBMI\n0\n1.00\n0.18\n0.13\n0.08\n0.09\n0.2\n0.2\n0.55\n▇▇▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nHair\n0\n1\n3\n6\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133.00\n155.5\n166.0\n179.0\n192.00\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45.00\n54.5\n70.0\n85.0\n110.00\n▇▂▃▃▂\n\n\nBMI\n0\n1\n0.19\n0.13\n0.08\n0.1\n0.2\n0.2\n0.55\n▅▇▁▁▁\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHair\n0\n1\n3\n6\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133.00\n155.5\n166.0\n179.0\n192.00\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45.00\n54.5\n70.0\n85.0\n110.00\n▇▂▃▃▂\n\n\nBMI\n0\n1\n0.19\n0.13\n0.08\n0.1\n0.2\n0.2\n0.55\n▅▇▁▁▁\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHair\n0\n1\n3\n6\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133.00\n156.0\n166.0\n178.0\n183.00\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45.00\n55.0\n70.0\n80.0\n110.00\n▇▂▃▂▂\n\n\nBMI\n0\n1\n0.21\n0.14\n0.09\n0.1\n0.2\n0.2\n0.55\n▅▇▁▁▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/timothyharrison/Desktop/timharrison-P2-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/timothyharrison/Desktop/timharrison-P2-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Tim Harrison Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/Manuscript.html",
    "href": "starter-analysis-exercise/products/report/Manuscript.html",
    "title": "Data Analysis Project",
    "section": "",
    "text": "When financial institutions want to extend credit they need to ascertain a customer’s credit worthiness and probability of repaying the loan. Companies like Experian exist and can provide information that will aide in this decision. To have a more competitive edge banks can assess the credit worthiness of its customer’s with this data, but also have access to their bank information. I want to create a way to segment customers that combines information gleaned from Experian data, like a FICO score, and use data only available to the bank to have a more holisitic way to assess credit worthiness."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/Manuscript.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/Manuscript.html#general-background-information",
    "title": "Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nCreditworthiness assessment is a critical process for financial institutions when deciding whether to extend credit to potential borrowers. Traditional methods rely heavily on credit scores provided by agencies like Experian, which offer a numerical representation of a customer’s credit history and risk. However, these scores alone may not provide a comprehensive view of a borrower’s financial situation. Banks possess additional data about their customers, such as account balances, transaction histories, and other financial behaviors, which can offer deeper insights into their creditworthiness.\nIn recent years, there has been a growing interest in combining these external credit scores with internal bank data to create more accurate and holistic credit assessments. This approach can help financial institutions better understand the risk profile of their customers and make more informed lending decisions. By leveraging advanced data analysis techniques, such as machine learning and cluster analysis, banks can identify patterns and segments within their customer base that are not apparent through traditional credit scoring methods alone.\nThe integration of multiple data sources for creditworthiness assessment not only enhances the predictive accuracy but also provides a competitive advantage in the financial industry. This project aims to explore the potential of combining Experian credit data with bank-specific information to develop a more comprehensive method for assessing customer creditworthiness. Through synthetic data creation and advanced statistical analyses, we seek to demonstrate the benefits and feasibility of this integrated approach."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/Manuscript.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/Manuscript.html#description-of-data-and-data-source",
    "title": "Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nTo conduct this analysis, I will generate synthetic data using artificial intelligence software. The dataset will include attributes typically found in Experian credit reports, such as FICO scores and credit history details, along with additional customer attributes accessible through bank records, such as account balances and transaction histories. This approach allows for a more comprehensive dataset that mimics real-world scenarios. The .qmd file responsible for creating this synthetic data can be found under the Synthetic Data tab of the Project Menu."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/Manuscript.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/Manuscript.html#questionshypotheses-to-be-addressed",
    "title": "Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nI can create a more holistic picture of a customer’s credit worthiness if I factor in data only avaialable through a bank relationship."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/Manuscript.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/Manuscript.html#basic-statistical-analysis",
    "title": "Data Analysis Project",
    "section": "3.1 Basic statistical analysis",
    "text": "3.1 Basic statistical analysis\n\n# Load necessary libraries\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6      ✔ rsample      1.2.1 \n✔ dials        1.2.1      ✔ tune         1.2.1 \n✔ infer        1.0.7      ✔ workflows    1.1.4 \n✔ modeldata    1.4.0      ✔ workflowsets 1.1.0 \n✔ parsnip      1.2.1      ✔ yardstick    1.3.1 \n✔ recipes      1.0.10     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\nlibrary(here)\nlibrary(cluster)  # For clustering\nlibrary(factoextra)  # For visualizing clusters\n\nWelcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa\n\n# Load the data\ndata_path &lt;- here(\"starter-analysis-exercise\", \"data\", \"raw-data\", \"synthetic_financial_data_recreated.csv\")\ndf &lt;- read_csv(data_path)\n\nRows: 10000 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Employment Status\ndbl (18): Customer ID, Customer Tenure (years), Deposit Balance ($), Gross M...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Summary statistics\nsummary_stats &lt;- df %&gt;%\n  summarize(\n    avg_fico = mean(`FICO Score`, na.rm = TRUE),\n    avg_income = mean(`Gross Monthly Income ($)`, na.rm = TRUE),\n    avg_obligations = mean(`Current Credit Obligations ($)`, na.rm = TRUE)\n)\n\nprint(summary_stats)\n\n# A tibble: 1 × 3\n  avg_fico avg_income avg_obligations\n     &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;\n1     669.      3012.          11096.\n\n# Create histograms for FICO Score, Current Credit Obligations, and Gross Monthly Income\nfico_hist &lt;- ggplot(df, aes(x = `FICO Score`)) + \n  geom_histogram(binwidth = 10) + \n  ggtitle(\"FICO Score Distribution\")\n\nincome_hist &lt;- ggplot(df, aes(x = `Gross Monthly Income ($)`)) + \n  geom_histogram(binwidth = 100) + \n  ggtitle(\"Gross Monthly Income Distribution\")\n\nobligations_hist &lt;- ggplot(df, aes(x = `Current Credit Obligations ($)`)) + \n  geom_histogram(binwidth = 500) + \n  ggtitle(\"Current Credit Obligations Distribution\")\n\n# Display histograms\nprint(fico_hist)\n\n\n\n\n\n\n\nprint(income_hist)\n\n\n\n\n\n\n\nprint(obligations_hist)\n\n\n\n\n\n\n\n# Rename columns to simpler names\ndf_clean &lt;- df %&gt;%\n  rename(\n    fico_score = `FICO Score`,\n    monthly_income = `Gross Monthly Income ($)`,\n    credit_obligations = `Current Credit Obligations ($)`,\n    debt_write_off = `Debt Write-off`,\n    bnpl_3m = `BNPL Amount 3m ($)`,\n    bnpl_6m = `BNPL Amount 6m ($)`,\n    bnpl_9m = `BNPL Amount 9m ($)`,\n    bnpl_12m = `BNPL Amount 12m ($)`\n  )\n\n# Ensure the dependent variable is a factor\ndf_clean &lt;- df_clean %&gt;%\n  mutate(debt_write_off = factor(debt_write_off, levels = c(0, 1)))\n\n# Check the structure of df_clean\nstr(df_clean)\n\ntibble [10,000 × 19] (S3: tbl_df/tbl/data.frame)\n $ Customer ID            : num [1:10000] 1 2 3 4 5 6 7 8 9 10 ...\n $ Customer Tenure (years): num [1:10000] 8 9 4 7 6 5 6 3 6 6 ...\n $ Deposit Balance ($)    : num [1:10000] 5142 6941 5620 4721 4347 ...\n $ monthly_income         : num [1:10000] 1980 2246 1774 1983 4722 ...\n $ bnpl_3m                : num [1:10000] 0 0 0 0 0 ...\n $ bnpl_6m                : num [1:10000] 259 0 0 0 0 ...\n $ bnpl_9m                : num [1:10000] 699 0 0 0 0 ...\n $ bnpl_12m               : num [1:10000] 804 0 0 0 0 ...\n $ Overdraft History      : num [1:10000] 0 0 0 0 0 0 0 2 1 0 ...\n $ fico_score             : num [1:10000] 596 673 725 673 633 ...\n $ credit_obligations     : num [1:10000] 24398 15398 20338 1365 9950 ...\n $ Payment Timeliness 30+ : num [1:10000] 2 0 0 3 1 2 0 0 2 0 ...\n $ Payment Timeliness 60+ : num [1:10000] 1 0 0 1 1 1 0 0 1 0 ...\n $ Payment Timeliness 90+ : num [1:10000] 0 0 0 0 0 1 0 0 1 0 ...\n $ debt_write_off         : Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 2 1 1 2 1 ...\n $ Credit Inquiries       : num [1:10000] 0 0 1 0 0 0 0 1 1 1 ...\n $ Years Since Bankruptcy : num [1:10000] NA NA NA NA NA 5 NA NA NA 6 ...\n $ Employment Status      : chr [1:10000] \"Employed\" \"Student\" \"Employed\" \"Retired\" ...\n $ Open Credit Accounts   : num [1:10000] 9 7 10 1 5 1 1 1 1 5 ...\n\n# Analysis 1: Clustering with FICO score, current credit obligations, and payment timeliness\n\n# Select relevant columns for clustering\ndf_clustering_1 &lt;- df_clean %&gt;%\n  select(fico_score, credit_obligations, `Payment Timeliness 30+`, `Payment Timeliness 60+`, `Payment Timeliness 90+`)\n\n# Determine the optimal number of clusters using the elbow method\nset.seed(123)\nfviz_nbclust(df_clustering_1, kmeans, method = \"wss\")\n\n\n\n\n\n\n\n# Apply K-means clustering with the chosen number of clusters (2)\nset.seed(123)\nkmeans_result_1 &lt;- kmeans(df_clustering_1, centers = 2, nstart = 25)\n\n# Add the cluster assignments to the original data\ndf_clean$cluster_1 &lt;- as.factor(kmeans_result_1$cluster)\n\n# Visualize the clusters\nfviz_cluster(kmeans_result_1, data = df_clustering_1, geom = \"point\") +\n  ggtitle(\"Customer Segments (FICO, Obligations, Payment Timeliness)\")\n\n\n\n\n\n\n\n# Print cluster centroids\nprint(kmeans_result_1$centers)\n\n  fico_score credit_obligations Payment Timeliness 30+ Payment Timeliness 60+\n1   670.3551           16604.62              0.9857830              0.4915325\n2   668.3943            6045.05              0.9917577              0.4941537\n  Payment Timeliness 90+\n1              0.3771691\n2              0.3661108\n\n# Compute summary statistics for each cluster\ncluster_summary_1 &lt;- df_clean %&gt;%\n  group_by(cluster_1) %&gt;%\n  summarize(\n    avg_fico = mean(fico_score),\n    avg_obligations = mean(credit_obligations),\n    avg_payment_30 = mean(`Payment Timeliness 30+`),\n    avg_payment_60 = mean(`Payment Timeliness 60+`),\n    avg_payment_90 = mean(`Payment Timeliness 90+`),\n    count = n()\n  )\n\nprint(cluster_summary_1)\n\n# A tibble: 2 × 7\n  cluster_1 avg_fico avg_obligations avg_payment_30 avg_payment_60\n  &lt;fct&gt;        &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 1             670.          16605.          0.986          0.492\n2 2             668.           6045.          0.992          0.494\n# ℹ 2 more variables: avg_payment_90 &lt;dbl&gt;, count &lt;int&gt;\n\n# Boxplots for FICO Score by cluster\nggplot(df_clean, aes(x = cluster_1, y = fico_score)) +\n  geom_boxplot() +\n  ggtitle(\"FICO Score Distribution by Cluster (FICO, Obligations, Payment Timeliness)\")\n\n\n\n\n\n\n\n# Boxplots for Current Credit Obligations by cluster\nggplot(df_clean, aes(x = cluster_1, y = credit_obligations)) +\n  geom_boxplot() +\n  ggtitle(\"Credit Obligations Distribution by Cluster (FICO, Obligations, Payment Timeliness)\")\n\n\n\n\n\n\n\n# Boxplots for Payment Timeliness 30+ by cluster\nggplot(df_clean, aes(x = cluster_1, y = `Payment Timeliness 30+`)) +\n  geom_boxplot() +\n  ggtitle(\"Payment Timeliness 30+ Distribution by Cluster (FICO, Obligations, Payment Timeliness)\")\n\n\n\n\n\n\n\n# Boxplots for Payment Timeliness 60+ by cluster\nggplot(df_clean, aes(x = cluster_1, y = `Payment Timeliness 60+`)) +\n  geom_boxplot() +\n  ggtitle(\"Payment Timeliness 60+ Distribution by Cluster (FICO, Obligations, Payment Timeliness)\")\n\n\n\n\n\n\n\n# Boxplots for Payment Timeliness 90+ by cluster\nggplot(df_clean, aes(x = cluster_1, y = `Payment Timeliness 90+`)) +\n  geom_boxplot() +\n  ggtitle(\"Payment Timeliness 90+ Distribution by Cluster (FICO, Obligations, Payment Timeliness)\")\n\n\n\n\n\n\n\n# Cluster Interpretation\ncluster_summary_1 %&gt;%\n  mutate(\n    interpretation = case_when(\n      cluster_1 == 1 ~ \"High FICO score, low credit obligations, good payment timeliness\",\n      cluster_1 == 2 ~ \"Low FICO score, high credit obligations, poor payment timeliness\",\n      TRUE ~ \"Other\"\n    )\n  )\n\n# A tibble: 2 × 8\n  cluster_1 avg_fico avg_obligations avg_payment_30 avg_payment_60\n  &lt;fct&gt;        &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 1             670.          16605.          0.986          0.492\n2 2             668.           6045.          0.992          0.494\n# ℹ 3 more variables: avg_payment_90 &lt;dbl&gt;, count &lt;int&gt;, interpretation &lt;chr&gt;\n\n# Analysis 2: Clustering with BNPL usage variables included\n\n# Select relevant columns for clustering, including BNPL usage\ndf_clustering_2 &lt;- df_clean %&gt;%\n  select(fico_score, credit_obligations, `Payment Timeliness 30+`, `Payment Timeliness 60+`, `Payment Timeliness 90+`, bnpl_3m, bnpl_6m, bnpl_9m, bnpl_12m)\n\n# Determine the optimal number of clusters using the elbow method\nset.seed(123)\nfviz_nbclust(df_clustering_2, kmeans, method = \"wss\")\n\n\n\n\n\n\n\n# Apply K-means clustering with the chosen number of clusters (3)\nset.seed(123)\nkmeans_result_2 &lt;- kmeans(df_clustering_2, centers = 3, nstart = 25)\n\n# Add the cluster assignments to the original data\ndf_clean$cluster_2 &lt;- as.factor(kmeans_result_2$cluster)\n\n# Visualize the clusters\nfviz_cluster(kmeans_result_2, data = df_clustering_2, geom = \"point\") +\n  ggtitle(\"Customer Segments (FICO, Obligations, Payment Timeliness, BNPL Amounts)\")\n\n\n\n\n\n\n\n# Print cluster centroids\nprint(kmeans_result_2$centers)\n\n  fico_score credit_obligations Payment Timeliness 30+ Payment Timeliness 60+\n1   669.6028          18811.582              0.9948079              0.4967117\n2   670.6628          11519.397              0.9805987              0.4922395\n3   667.7385           4295.832              0.9925778              0.4904368\n  Payment Timeliness 90+  bnpl_3m  bnpl_6m  bnpl_9m bnpl_12m\n1              0.3932156 115.0157 162.3077 211.1894 229.3493\n2              0.3605876 111.7883 154.4571 202.5063 222.4028\n3              0.3645447 113.4761 163.8638 204.2703 229.3157\n\n# Compute summary statistics for each cluster\ncluster_summary_2 &lt;- df_clean %&gt;%\n  group_by(cluster_2) %&gt;%\n  summarize(\n    avg_fico = mean(fico_score),\n    avg_obligations = mean(credit_obligations),\n    avg_payment_30 = mean(`Payment Timeliness 30+`),\n    avg_payment_60 = mean(`Payment Timeliness 60+`),\n    avg_payment_90 = mean(`Payment Timeliness 90+`),\n    avg_bnpl_3m = mean(bnpl_3m),\n    avg_bnpl_6m = mean(bnpl_6m),\n    avg_bnpl_9m = mean(bnpl_9m),\n    avg_bnpl_12m = mean(bnpl_12m),\n    count = n()\n  )\n\nprint(cluster_summary_2)\n\n# A tibble: 3 × 11\n  cluster_2 avg_fico avg_obligations avg_payment_30 avg_payment_60\n  &lt;fct&gt;        &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 1             670.          18812.          0.995          0.497\n2 2             671.          11519.          0.981          0.492\n3 3             668.           4296.          0.993          0.490\n# ℹ 6 more variables: avg_payment_90 &lt;dbl&gt;, avg_bnpl_3m &lt;dbl&gt;,\n#   avg_bnpl_6m &lt;dbl&gt;, avg_bnpl_9m &lt;dbl&gt;, avg_bnpl_12m &lt;dbl&gt;, count &lt;int&gt;\n\n# Boxplots for BNPL Usage by cluster\nggplot(df_clean, aes(x = cluster_2, y = bnpl_3m)) +\n  geom_boxplot() +\n  ggtitle(\"BNPL Usage 3m Distribution by Cluster (FICO, Obligations, Payment Timeliness, BNPL Amounts)\")\n\n\n\n\n\n\n\nggplot(df_clean, aes(x = cluster_2, y = bnpl_6m)) +\n  geom_boxplot() +\n  ggtitle(\"BNPL Usage 6m Distribution by Cluster (FICO, Obligations, Payment Timeliness, BNPL Amounts)\")\n\n\n\n\n\n\n\nggplot(df_clean, aes(x = cluster_2, y = bnpl_9m)) +\n  geom_boxplot() +\n  ggtitle(\"BNPL Usage 9m Distribution by Cluster (FICO, Obligations, Payment Timeliness, BNPL Amounts)\")\n\n\n\n\n\n\n\nggplot(df_clean, aes(x = cluster_2, y = bnpl_12m)) +\n  geom_boxplot() +\n  ggtitle(\"BNPL Usage 12m Distribution by Cluster (FICO, Obligations, Payment Timeliness, BNPL Amounts)\")\n\n\n\n\n\n\n\n# Cluster Interpretation\ncluster_summary_2 %&gt;%\n  mutate(\n    interpretation = case_when(\n      cluster_2 == 1 ~ \"Low BNPL usage, good credit profile\",\n      cluster_2 == 2 ~ \"Moderate BNPL usage, moderate credit profile\",\n      cluster_2 == 3 ~ \"High BNPL usage, poor credit profile\",\n      TRUE ~ \"Other\"\n    )\n  )\n\n# A tibble: 3 × 12\n  cluster_2 avg_fico avg_obligations avg_payment_30 avg_payment_60\n  &lt;fct&gt;        &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 1             670.          18812.          0.995          0.497\n2 2             671.          11519.          0.981          0.492\n3 3             668.           4296.          0.993          0.490\n# ℹ 7 more variables: avg_payment_90 &lt;dbl&gt;, avg_bnpl_3m &lt;dbl&gt;,\n#   avg_bnpl_6m &lt;dbl&gt;, avg_bnpl_9m &lt;dbl&gt;, avg_bnpl_12m &lt;dbl&gt;, count &lt;int&gt;,\n#   interpretation &lt;chr&gt;\n\n\n\n# Load necessary libraries\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(broom)\nlibrary(pROC)\n\nType 'citation(\"pROC\")' for a citation.\n\n\n\nAttaching package: 'pROC'\n\n\nThe following objects are masked from 'package:stats':\n\n    cov, smooth, var\n\n# Logistic regression model using the first set of clusters as a predictor\nlogistic_model_1 &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\") %&gt;%\n  fit(debt_write_off ~ cluster_1, data = df_clean)\n\n# Logistic regression model using the second set of clusters as a predictor\nlogistic_model_2 &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\") %&gt;%\n  fit(debt_write_off ~ cluster_2, data = df_clean)\n\n# Extract model summaries\nsummary_1 &lt;- summary(logistic_model_1$fit)\nsummary_2 &lt;- summary(logistic_model_2$fit)\n\n# Extract AIC values\naic_1 &lt;- summary_1$aic\naic_2 &lt;- summary_2$aic\n\n# Calculate pseudo R-squared values\npseudo_r2_1 &lt;- 1 - summary_1$deviance / summary_1$null.deviance\npseudo_r2_2 &lt;- 1 - summary_2$deviance / summary_2$null.deviance\n\n# Calculate ROC and AUC\nroc_1 &lt;- roc(df_clean$debt_write_off, fitted(logistic_model_1$fit))\n\nSetting levels: control = 0, case = 1\n\n\nSetting direction: controls &lt; cases\n\nroc_2 &lt;- roc(df_clean$debt_write_off, fitted(logistic_model_2$fit))\n\nSetting levels: control = 0, case = 1\nSetting direction: controls &lt; cases\n\nauc_1 &lt;- auc(roc_1)\nauc_2 &lt;- auc(roc_2)\n\n# Create a comparison table\ncomparison_metrics &lt;- tibble(\n  Model = c(\"Model with Cluster 1\", \"Model with Cluster 2\"),\n  AIC = c(aic_1, aic_2),\n  Pseudo_R2 = c(pseudo_r2_1, pseudo_r2_2),\n  AUC = c(auc_1, auc_2)\n)\n\n# Display the comparison metrics table\ncomparison_metrics %&gt;%\n  knitr::kable(caption = \"Comparison of Logistic Regression Models - Additional Metrics\")\n\n\nComparison of Logistic Regression Models - Additional Metrics\n\n\nModel\nAIC\nPseudo_R2\nAUC\n\n\n\n\nModel with Cluster 1\n11059.69\n0.000033\n0.5035227\n\n\nModel with Cluster 2\n11058.26\n0.000343\n0.5123398\n\n\n\n\n\n\n\n\n# Ensure the dependent variable is a factor\ndf_clean &lt;- df_clean %&gt;%\n  mutate(debt_write_off = factor(debt_write_off, levels = c(0, 1)))\n\n# Analysis 1: Clustering with FICO score, current credit obligations, and payment timeliness\n\n# Select relevant columns for clustering\ndf_clustering_1 &lt;- df_clean %&gt;%\n  select(fico_score, credit_obligations, `Payment Timeliness 30+`, `Payment Timeliness 60+`, `Payment Timeliness 90+`)\n\n# Determine the optimal number of clusters using the elbow method\nset.seed(123)\nfviz_nbclust(df_clustering_1, kmeans, method = \"wss\")\n\n\n\n\n\n\n\n# Apply K-means clustering with the chosen number of clusters (2)\nset.seed(123)\nkmeans_result_1 &lt;- kmeans(df_clustering_1, centers = 2, nstart = 25)\n\n# Add the cluster assignments to the original data\ndf_clean$cluster_1 &lt;- as.factor(kmeans_result_1$cluster)\n\n# Analysis 2: Clustering with BNPL usage variables included\n\n# Select relevant columns for clustering, including BNPL usage\ndf_clustering_2 &lt;- df_clean %&gt;%\n  select(fico_score, credit_obligations, `Payment Timeliness 30+`, `Payment Timeliness 60+`, `Payment Timeliness 90+`, bnpl_3m, bnpl_6m, bnpl_9m, bnpl_12m)\n\n# Determine the optimal number of clusters using the elbow method\nset.seed(123)\nfviz_nbclust(df_clustering_2, kmeans, method = \"wss\")\n\n\n\n\n\n\n\n# Apply K-means clustering with the chosen number of clusters (3)\nset.seed(123)\nkmeans_result_2 &lt;- kmeans(df_clustering_2, centers = 3, nstart = 25)\n\n# Add the cluster assignments to the original data\ndf_clean$cluster_2 &lt;- as.factor(kmeans_result_2$cluster)\n\n# Logistic regression model using the first set of clusters as a predictor\nlogistic_model_1 &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\") %&gt;%\n  fit(debt_write_off ~ cluster_1, data = df_clean)\n\n# Tidy the logistic model summary for the first set of clusters\nlogistic_summary_1 &lt;- tidy(logistic_model_1$fit)\nlogistic_summary_1$model &lt;- \"Model with Cluster 1\"\n\n# Logistic regression model using the second set of clusters as a predictor\nlogistic_model_2 &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\") %&gt;%\n  fit(debt_write_off ~ cluster_2, data = df_clean)\n\n# Tidy the logistic model summary for the second set of clusters\nlogistic_summary_2 &lt;- tidy(logistic_model_2$fit)\nlogistic_summary_2$model &lt;- \"Model with Cluster 2\"\n\n# Combine the two summaries into one table\ncomparison_table &lt;- bind_rows(logistic_summary_1, logistic_summary_2) %&gt;%\n  select(model, term, estimate, std.error, statistic, p.value)\n\n# Display the comparison table\ncomparison_table %&gt;%\n  knitr::kable(caption = \"Comparison of Logistic Regression Models\")\n\n\nComparison of Logistic Regression Models\n\n\n\n\n\n\n\n\n\n\nmodel\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\nModel with Cluster 1\n(Intercept)\n-1.1297990\n0.0336569\n-33.5681127\n0.0000000\n\n\nModel with Cluster 1\ncluster_12\n-0.0282265\n0.0467611\n-0.6036313\n0.5460888\n\n\nModel with Cluster 2\n(Intercept)\n-1.0880253\n0.0428529\n-25.3897646\n0.0000000\n\n\nModel with Cluster 2\ncluster_22\n-0.1122280\n0.0582632\n-1.9262263\n0.0540761\n\n\nModel with Cluster 2\ncluster_23\n-0.0470804\n0.0582005\n-0.8089346\n0.4185528"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "Original Graph\nI sourced the original graph from FiveThirtyEight’s 2018 Best - And Weirdest - Charts of 2018.\nhttps://fivethirtyeight.com/features/the-45-best-and-weirdest-charts-we-made-in-2018/\n\n\n\nCode Generating New Chart\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(grid)\n\n\n\n# Create the data frame (example data, replace with your actual data)\ndata &lt;- data.frame(\n  Year = rep(2004:2018, 4),\n  Sport = rep(c(\"Curling\", \"Figure skating\", \"Luge\", \"Ski jumping\"), each = 15),\n  SearchIndex = c(\n    # Example data for each sport\n    runif(15, min = 0, max = 1),  # Curling\n    runif(15, min = 0, max = 1),  # Figure skating\n    runif(15, min = 0, max = 1),  # Luge\n    runif(15, min = 0, max = 1)   # Ski jumping\n  )\n)\n\n# Create individual plots\np1 &lt;- ggplot(subset(data, Sport == \"Curling\"), aes(x = Year, y = SearchIndex)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Curling\", x = NULL, y = NULL) +\n  theme_minimal()\n\np2 &lt;- ggplot(subset(data, Sport == \"Figure skating\"), aes(x = Year, y = SearchIndex)) +\n  geom_line(color = \"green\") +\n  labs(title = \"Figure skating\", x = NULL, y = NULL) +\n  theme_minimal()\n\np3 &lt;- ggplot(subset(data, Sport == \"Luge\"), aes(x = Year, y = SearchIndex)) +\n  geom_line(color = \"cyan\") +\n  labs(title = \"Luge\", x = NULL, y = NULL) +\n  theme_minimal() +\n  annotate(\"text\", x = 2010, y = max(subset(data, Sport == \"Luge\")$SearchIndex),\n           label = \"Georgian luger dies\\nat 2010 Vancouver Games\", size = 3, hjust = -0.1)\n\np4 &lt;- ggplot(subset(data, Sport == \"Ski jumping\"), aes(x = Year, y = SearchIndex)) +\n  geom_line(color = \"purple\") +\n  labs(title = \"Ski jumping\", x = NULL, y = NULL) +\n  theme_minimal()\n\n# Arrange the plots in a 2x2 grid\ngrid.arrange(\n  p1, p2, p3, p4,\n  ncol = 2,\n  top = textGrob(\"Every four years, Americans get really interested in curling\",\n                 gp = gpar(fontsize = 16, fontface = \"bold\")),\n  bottom = textGrob(\"Monthly U.S. Google Trends search-index data for selected Olympic sports, 2004-18\",\n                    gp = gpar(fontsize = 10))\n)\n\n\n\n\n\n\n\n# Save the plot\nggsave(\"olympic_sports_trends.png\", width = 10, height = 8)\n\n\n\nTable\n\nlibrary(readr)\nlibrary(knitr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following object is masked from 'package:gridExtra':\n\n    combine\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::combine() masks gridExtra::combine()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nhead(data)\n\n  Year   Sport SearchIndex\n1 2004 Curling  0.78392253\n2 2005 Curling  0.46853194\n3 2006 Curling  0.43515840\n4 2007 Curling  0.95464224\n5 2008 Curling  0.17607671\n6 2009 Curling  0.05882537\n\n# Load the data with correct delimiter\ndata2 &lt;- read_csv(\"multiTimeline.csv\", col_names = TRUE)\n\nRows: 247 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Month, Nordic combined: (United States), Biathlon: (United States),...\ndbl (1): Curling: (United States)\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Rename columns for easier access\ncolnames(data2) &lt;- c(\"Month\", \"Curling\", \"Nordic_combined\", \"Biathlon\", \"Luge\")\n\n# Convert the 'Month' column to Date type\ndata2$Month &lt;- as.Date(data2$Month, format = \"%Y-%m\")\n\n# Reshape the data for printing\ndata_long &lt;- data2 %&gt;%\n  gather(key = \"Sport\", value = \"Search_Interest\", -Month) %&gt;%\n  mutate(Year = as.integer(format(Month, \"%Y\"))) %&gt;%\n  select(Year, Sport, Search_Interest) %&gt;%\n  arrange(Year, Sport)\n\n# Print the first few rows as a table\nkable(head(data_long), caption = \"First few rows of the dataset\")\n\n\nFirst few rows of the dataset\n\n\nYear\nSport\nSearch_Interest\n\n\n\n\nNA\nBiathlon\n1\n\n\nNA\nBiathlon\n1\n\n\nNA\nBiathlon\n1\n\n\nNA\nBiathlon\n&lt;1\n\n\nNA\nBiathlon\n&lt;1\n\n\nNA\nBiathlon\n&lt;1\n\n\n\n\n\n\n\nAI Prompts\nI’m having trouble getting the AI to print out the full prompt. Essentially I just put a picture of the image in the chat and it produced a graph. Then I pulled in the actual data and had the AI pull from the data file to create the graph. The code it generated is above. It didn’t work perfectly, but it’s interesting how close it got with how little effort was involved."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "UTSA MSDA Program",
    "section": "",
    "text": "Practicum II\n\nIntroduction\nWelcome to my website and data analysis portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun!\n\nFeel free to change this text any way you want 😁!"
  },
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Load Data\n\n# Load necessary libraries\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(caret)\n\nLoading required package: lattice\n\nAttaching package: 'caret'\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6      ✔ rsample      1.2.1 \n✔ dials        1.2.1      ✔ tune         1.2.1 \n✔ infer        1.0.7      ✔ workflows    1.1.4 \n✔ modeldata    1.4.0      ✔ workflowsets 1.1.0 \n✔ parsnip      1.2.1      ✔ yardstick    1.3.1 \n✔ recipes      1.0.10     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard()        masks purrr::discard()\n✖ dplyr::filter()          masks stats::filter()\n✖ recipes::fixed()         masks stringr::fixed()\n✖ dplyr::lag()             masks stats::lag()\n✖ caret::lift()            masks purrr::lift()\n✖ yardstick::precision()   masks caret::precision()\n✖ yardstick::recall()      masks caret::recall()\n✖ yardstick::sensitivity() masks caret::sensitivity()\n✖ yardstick::spec()        masks readr::spec()\n✖ yardstick::specificity() masks caret::specificity()\n✖ recipes::step()          masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nlibrary(ggplot2)\n\n# Load the CSV files\newf_matches &lt;- read_csv(\"data/ewf_matches.csv\")\n\nRows: 2298 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (12): season_id, season, division, match_id, match_name, home_team_id, ...\ndbl   (8): tier, home_team_score, away_team_score, home_team_score_margin, a...\nnum   (1): attendance\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\newf_appearances &lt;- read_csv(\"data/ewf_appearances.csv\")\n\nRows: 4596 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (11): season_id, season, division, match_id, match_name, team_id, team_...\ndbl  (10): tier, home_team, away_team, goals_for, goals_against, goal_differ...\nnum   (1): attendance\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\newf_standings &lt;- read_csv(\"data/ewf_standings.csv\")\n\nRows: 258 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): season_id, season, division, team_id, team_name, season_outcome\ndbl (11): tier, position, played, wins, draws, losses, goals_for, goals_agai...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Summarize the datasets\nsummary(ewf_matches)\n\n  season_id            season               tier         division        \n Length:2298        Length:2298        Min.   :1.000   Length:2298       \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.477                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :2.000                     \n                                                                         \n   match_id          match_name             date              attendance   \n Length:2298        Length:2298        Min.   :2011-04-13   Min.   :  103  \n Class :character   Class :character   1st Qu.:2016-08-28   1st Qu.:  562  \n Mode  :character   Mode  :character   Median :2019-10-13   Median : 1062  \n                                       Mean   :2019-05-18   Mean   : 2492  \n                                       3rd Qu.:2022-03-30   3rd Qu.: 2071  \n                                       Max.   :2024-05-18   Max.   :60160  \n                                                            NA's   :1188   \n home_team_id       home_team_name     away_team_id       away_team_name    \n Length:2298        Length:2298        Length:2298        Length:2298       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    score           home_team_score away_team_score  home_team_score_margin\n Length:2298        Min.   : 0.00   Min.   : 0.000   Min.   :-12.0000      \n Class :character   1st Qu.: 0.00   1st Qu.: 0.000   1st Qu.: -1.0000      \n Mode  :character   Median : 1.00   Median : 1.000   Median :  0.0000      \n                    Mean   : 1.59   Mean   : 1.486   Mean   :  0.1044      \n                    3rd Qu.: 2.00   3rd Qu.: 2.000   3rd Qu.:  1.0000      \n                    Max.   :11.00   Max.   :12.000   Max.   : 10.0000      \n                                                                           \n away_team_score_margin home_team_win   away_team_win        draw      \n Min.   :-10.0000       Min.   :0.000   Min.   :0.000   Min.   :0.000  \n 1st Qu.: -1.0000       1st Qu.:0.000   1st Qu.:0.000   1st Qu.:0.000  \n Median :  0.0000       Median :0.000   Median :0.000   Median :0.000  \n Mean   : -0.1044       Mean   :0.436   Mean   :0.386   Mean   :0.178  \n 3rd Qu.:  1.0000       3rd Qu.:1.000   3rd Qu.:1.000   3rd Qu.:0.000  \n Max.   : 12.0000       Max.   :1.000   Max.   :1.000   Max.   :1.000  \n                                                                       \n    result              note          \n Length:2298        Length:2298       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n\nsummary(ewf_appearances)\n\n  season_id            season               tier         division        \n Length:4596        Length:4596        Min.   :1.000   Length:4596       \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.477                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :2.000                     \n                                                                         \n   match_id          match_name             date              attendance   \n Length:4596        Length:4596        Min.   :2011-04-13   Min.   :  103  \n Class :character   Class :character   1st Qu.:2016-08-28   1st Qu.:  562  \n Mode  :character   Mode  :character   Median :2019-10-13   Median : 1062  \n                                       Mean   :2019-05-18   Mean   : 2492  \n                                       3rd Qu.:2022-04-01   3rd Qu.: 2074  \n                                       Max.   :2024-05-18   Max.   :60160  \n                                                            NA's   :2376   \n   team_id           team_name         opponent_id        opponent_name     \n Length:4596        Length:4596        Length:4596        Length:4596       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   home_team     away_team     goals_for      goals_against    goal_difference\n Min.   :0.0   Min.   :0.0   Min.   : 0.000   Min.   : 0.000   Min.   :-12    \n 1st Qu.:0.0   1st Qu.:0.0   1st Qu.: 0.000   1st Qu.: 0.000   1st Qu.: -1    \n Median :0.5   Median :0.5   Median : 1.000   Median : 1.000   Median :  0    \n Mean   :0.5   Mean   :0.5   Mean   : 1.538   Mean   : 1.538   Mean   :  0    \n 3rd Qu.:1.0   3rd Qu.:1.0   3rd Qu.: 2.000   3rd Qu.: 2.000   3rd Qu.:  1    \n Max.   :1.0   Max.   :1.0   Max.   :12.000   Max.   :12.000   Max.   : 12    \n                                                                              \n    result               win             loss            draw      \n Length:4596        Min.   :0.000   Min.   :0.000   Min.   :0.000  \n Class :character   1st Qu.:0.000   1st Qu.:0.000   1st Qu.:0.000  \n Mode  :character   Median :0.000   Median :0.000   Median :0.000  \n                    Mean   :0.411   Mean   :0.411   Mean   :0.178  \n                    3rd Qu.:1.000   3rd Qu.:1.000   3rd Qu.:0.000  \n                    Max.   :1.000   Max.   :1.000   Max.   :1.000  \n                                                                   \n     note               points     \n Length:4596        Min.   :0.000  \n Class :character   1st Qu.:0.000  \n Mode  :character   Median :1.000  \n                    Mean   :1.411  \n                    3rd Qu.:3.000  \n                    Max.   :3.000  \n                                   \n\nsummary(ewf_standings)\n\n  season_id            season               tier         division        \n Length:258         Length:258         Min.   :1.000   Length:258        \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.461                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :2.000                     \n    position        team_id           team_name             played     \n Min.   : 1.000   Length:258         Length:258         Min.   : 8.00  \n 1st Qu.: 3.000   Class :character   Class :character   1st Qu.:14.00  \n Median : 6.000   Mode  :character   Mode  :character   Median :18.00  \n Mean   : 5.767                                         Mean   :17.81  \n 3rd Qu.: 8.000                                         3rd Qu.:22.00  \n Max.   :12.000                                         Max.   :22.00  \n      wins            draws           losses         goals_for   \n Min.   : 0.000   Min.   :0.000   Min.   : 0.000   Min.   : 2.0  \n 1st Qu.: 4.000   1st Qu.:2.000   1st Qu.: 3.250   1st Qu.:17.0  \n Median : 6.000   Median :3.000   Median : 7.000   Median :24.0  \n Mean   : 7.322   Mean   :3.171   Mean   : 7.322   Mean   :27.4  \n 3rd Qu.:11.000   3rd Qu.:4.000   3rd Qu.:10.000   3rd Qu.:35.0  \n Max.   :19.000   Max.   :9.000   Max.   :19.000   Max.   :98.0  \n goals_against   goal_difference     points      point_adjustment  \n Min.   : 3.00   Min.   :-59     Min.   :-3.00   Min.   :-10.0000  \n 1st Qu.:16.00   1st Qu.:-16     1st Qu.:15.00   1st Qu.:  0.0000  \n Median :25.00   Median : -3     Median :23.00   Median :  0.0000  \n Mean   :27.40   Mean   :  0     Mean   :25.03   Mean   : -0.1047  \n 3rd Qu.:37.75   3rd Qu.: 15     3rd Qu.:34.75   3rd Qu.:  0.0000  \n Max.   :75.00   Max.   : 91     Max.   :58.00   Max.   :  0.0000  \n season_outcome    \n Length:258        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n# Number of matches per season\nmatches_per_season &lt;- ewf_matches %&gt;%\n  group_by(season) %&gt;%\n  summarise(total_matches = n())\n\n# Plot the number of matches per season\nggplot(matches_per_season, aes(x = season, y = total_matches)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(title = \"Number of Matches per Season\", x = \"Season\", y = \"Total Matches\")\n\n\n\n\n\n\n\n# Average attendance per season\naverage_attendance &lt;- ewf_matches %&gt;%\n  mutate(attendance = as.numeric(gsub(\",\", \"\", attendance))) %&gt;%\n  group_by(season) %&gt;%\n  summarise(average_attendance = mean(attendance, na.rm = TRUE))\n\n# Plot the average attendance per season\nggplot(average_attendance, aes(x = season, y = average_attendance)) +\n  geom_line() +\n  geom_point() +\n  theme_minimal() +\n  labs(title = \"Average Attendance per Season\", x = \"Season\", y = \"Average Attendance\")\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n# Number of goals scored by each team per season\ngoals_per_team &lt;- ewf_standings %&gt;%\n  group_by(season, team_name) %&gt;%\n  summarise(total_goals = sum(goals_for))\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n\n# Plot the goals scored by each team per season\nggplot(goals_per_team, aes(x = team_name, y = total_goals, fill = season)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  theme_minimal() +\n  labs(title = \"Goals Scored by Each Team per Season\", x = \"Team\", y = \"Total Goals\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n# Distribution of match results\nmatch_results &lt;- ewf_matches %&gt;%\n  group_by(result) %&gt;%\n  summarise(count = n())\n\n# Plot the distribution of match results\nggplot(match_results, aes(x = result, y = count, fill = result)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(title = \"Distribution of Match Results\", x = \"Result\", y = \"Count\")\n\n\n\n\n\n\n\n# Save the plots to files\nggsave(\"matches_per_season.png\", plot = last_plot(), width = 8, height = 5)\nggsave(\"average_attendance_per_season.png\", plot = last_plot(), width = 8, height = 5)\nggsave(\"goals_per_team.png\", plot = last_plot(), width = 8, height = 5)\nggsave(\"match_results_distribution.png\", plot = last_plot(), width = 8, height = 5)\n\n# Print the summaries and head of each dataset\nprint(\"Summary of ewf_matches:\")\n\n[1] \"Summary of ewf_matches:\"\n\nprint(summary(ewf_matches))\n\n  season_id            season               tier         division        \n Length:2298        Length:2298        Min.   :1.000   Length:2298       \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.477                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :2.000                     \n                                                                         \n   match_id          match_name             date              attendance   \n Length:2298        Length:2298        Min.   :2011-04-13   Min.   :  103  \n Class :character   Class :character   1st Qu.:2016-08-28   1st Qu.:  562  \n Mode  :character   Mode  :character   Median :2019-10-13   Median : 1062  \n                                       Mean   :2019-05-18   Mean   : 2492  \n                                       3rd Qu.:2022-03-30   3rd Qu.: 2071  \n                                       Max.   :2024-05-18   Max.   :60160  \n                                                            NA's   :1188   \n home_team_id       home_team_name     away_team_id       away_team_name    \n Length:2298        Length:2298        Length:2298        Length:2298       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    score           home_team_score away_team_score  home_team_score_margin\n Length:2298        Min.   : 0.00   Min.   : 0.000   Min.   :-12.0000      \n Class :character   1st Qu.: 0.00   1st Qu.: 0.000   1st Qu.: -1.0000      \n Mode  :character   Median : 1.00   Median : 1.000   Median :  0.0000      \n                    Mean   : 1.59   Mean   : 1.486   Mean   :  0.1044      \n                    3rd Qu.: 2.00   3rd Qu.: 2.000   3rd Qu.:  1.0000      \n                    Max.   :11.00   Max.   :12.000   Max.   : 10.0000      \n                                                                           \n away_team_score_margin home_team_win   away_team_win        draw      \n Min.   :-10.0000       Min.   :0.000   Min.   :0.000   Min.   :0.000  \n 1st Qu.: -1.0000       1st Qu.:0.000   1st Qu.:0.000   1st Qu.:0.000  \n Median :  0.0000       Median :0.000   Median :0.000   Median :0.000  \n Mean   : -0.1044       Mean   :0.436   Mean   :0.386   Mean   :0.178  \n 3rd Qu.:  1.0000       3rd Qu.:1.000   3rd Qu.:1.000   3rd Qu.:0.000  \n Max.   : 12.0000       Max.   :1.000   Max.   :1.000   Max.   :1.000  \n                                                                       \n    result              note          \n Length:2298        Length:2298       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n\nprint(\"Summary of ewf_appearances:\")\n\n[1] \"Summary of ewf_appearances:\"\n\nprint(summary(ewf_appearances))\n\n  season_id            season               tier         division        \n Length:4596        Length:4596        Min.   :1.000   Length:4596       \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.477                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :2.000                     \n                                                                         \n   match_id          match_name             date              attendance   \n Length:4596        Length:4596        Min.   :2011-04-13   Min.   :  103  \n Class :character   Class :character   1st Qu.:2016-08-28   1st Qu.:  562  \n Mode  :character   Mode  :character   Median :2019-10-13   Median : 1062  \n                                       Mean   :2019-05-18   Mean   : 2492  \n                                       3rd Qu.:2022-04-01   3rd Qu.: 2074  \n                                       Max.   :2024-05-18   Max.   :60160  \n                                                            NA's   :2376   \n   team_id           team_name         opponent_id        opponent_name     \n Length:4596        Length:4596        Length:4596        Length:4596       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   home_team     away_team     goals_for      goals_against    goal_difference\n Min.   :0.0   Min.   :0.0   Min.   : 0.000   Min.   : 0.000   Min.   :-12    \n 1st Qu.:0.0   1st Qu.:0.0   1st Qu.: 0.000   1st Qu.: 0.000   1st Qu.: -1    \n Median :0.5   Median :0.5   Median : 1.000   Median : 1.000   Median :  0    \n Mean   :0.5   Mean   :0.5   Mean   : 1.538   Mean   : 1.538   Mean   :  0    \n 3rd Qu.:1.0   3rd Qu.:1.0   3rd Qu.: 2.000   3rd Qu.: 2.000   3rd Qu.:  1    \n Max.   :1.0   Max.   :1.0   Max.   :12.000   Max.   :12.000   Max.   : 12    \n                                                                              \n    result               win             loss            draw      \n Length:4596        Min.   :0.000   Min.   :0.000   Min.   :0.000  \n Class :character   1st Qu.:0.000   1st Qu.:0.000   1st Qu.:0.000  \n Mode  :character   Median :0.000   Median :0.000   Median :0.000  \n                    Mean   :0.411   Mean   :0.411   Mean   :0.178  \n                    3rd Qu.:1.000   3rd Qu.:1.000   3rd Qu.:0.000  \n                    Max.   :1.000   Max.   :1.000   Max.   :1.000  \n                                                                   \n     note               points     \n Length:4596        Min.   :0.000  \n Class :character   1st Qu.:0.000  \n Mode  :character   Median :1.000  \n                    Mean   :1.411  \n                    3rd Qu.:3.000  \n                    Max.   :3.000  \n                                   \n\nprint(\"Summary of ewf_standings:\")\n\n[1] \"Summary of ewf_standings:\"\n\nprint(summary(ewf_standings))\n\n  season_id            season               tier         division        \n Length:258         Length:258         Min.   :1.000   Length:258        \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.461                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :2.000                     \n    position        team_id           team_name             played     \n Min.   : 1.000   Length:258         Length:258         Min.   : 8.00  \n 1st Qu.: 3.000   Class :character   Class :character   1st Qu.:14.00  \n Median : 6.000   Mode  :character   Mode  :character   Median :18.00  \n Mean   : 5.767                                         Mean   :17.81  \n 3rd Qu.: 8.000                                         3rd Qu.:22.00  \n Max.   :12.000                                         Max.   :22.00  \n      wins            draws           losses         goals_for   \n Min.   : 0.000   Min.   :0.000   Min.   : 0.000   Min.   : 2.0  \n 1st Qu.: 4.000   1st Qu.:2.000   1st Qu.: 3.250   1st Qu.:17.0  \n Median : 6.000   Median :3.000   Median : 7.000   Median :24.0  \n Mean   : 7.322   Mean   :3.171   Mean   : 7.322   Mean   :27.4  \n 3rd Qu.:11.000   3rd Qu.:4.000   3rd Qu.:10.000   3rd Qu.:35.0  \n Max.   :19.000   Max.   :9.000   Max.   :19.000   Max.   :98.0  \n goals_against   goal_difference     points      point_adjustment  \n Min.   : 3.00   Min.   :-59     Min.   :-3.00   Min.   :-10.0000  \n 1st Qu.:16.00   1st Qu.:-16     1st Qu.:15.00   1st Qu.:  0.0000  \n Median :25.00   Median : -3     Median :23.00   Median :  0.0000  \n Mean   :27.40   Mean   :  0     Mean   :25.03   Mean   : -0.1047  \n 3rd Qu.:37.75   3rd Qu.: 15     3rd Qu.:34.75   3rd Qu.:  0.0000  \n Max.   :75.00   Max.   : 91     Max.   :58.00   Max.   :  0.0000  \n season_outcome    \n Length:258        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\nprint(\"Head of ewf_matches:\")\n\n[1] \"Head of ewf_matches:\"\n\nprint(head(ewf_matches))\n\n# A tibble: 6 × 22\n  season_id      season  tier division match_id match_name date       attendance\n  &lt;chr&gt;          &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;      &lt;date&gt;          &lt;dbl&gt;\n1 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Chelsea L… 2011-04-13       2510\n2 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Lincoln L… 2011-04-13        742\n3 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Birmingha… 2011-04-14        602\n4 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Liverpool… 2011-04-14        835\n5 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Everton L… 2011-04-20        220\n6 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Liverpool… 2011-04-20        341\n# ℹ 14 more variables: home_team_id &lt;chr&gt;, home_team_name &lt;chr&gt;,\n#   away_team_id &lt;chr&gt;, away_team_name &lt;chr&gt;, score &lt;chr&gt;,\n#   home_team_score &lt;dbl&gt;, away_team_score &lt;dbl&gt;, home_team_score_margin &lt;dbl&gt;,\n#   away_team_score_margin &lt;dbl&gt;, home_team_win &lt;dbl&gt;, away_team_win &lt;dbl&gt;,\n#   draw &lt;dbl&gt;, result &lt;chr&gt;, note &lt;chr&gt;\n\nprint(\"Head of ewf_appearances:\")\n\n[1] \"Head of ewf_appearances:\"\n\nprint(head(ewf_appearances))\n\n# A tibble: 6 × 23\n  season_id      season  tier division match_id match_name date       attendance\n  &lt;chr&gt;          &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;      &lt;date&gt;          &lt;dbl&gt;\n1 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Chelsea L… 2011-04-13       2510\n2 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Chelsea L… 2011-04-13       2510\n3 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Lincoln L… 2011-04-13        742\n4 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Lincoln L… 2011-04-13        742\n5 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Birmingha… 2011-04-14        602\n6 S-2011-2011-1… 2011-…     1 FA Wome… M-2011-… Birmingha… 2011-04-14        602\n# ℹ 15 more variables: team_id &lt;chr&gt;, team_name &lt;chr&gt;, opponent_id &lt;chr&gt;,\n#   opponent_name &lt;chr&gt;, home_team &lt;dbl&gt;, away_team &lt;dbl&gt;, goals_for &lt;dbl&gt;,\n#   goals_against &lt;dbl&gt;, goal_difference &lt;dbl&gt;, result &lt;chr&gt;, win &lt;dbl&gt;,\n#   loss &lt;dbl&gt;, draw &lt;dbl&gt;, note &lt;chr&gt;, points &lt;dbl&gt;\n\nprint(\"Head of ewf_standings:\")\n\n[1] \"Head of ewf_standings:\"\n\nprint(head(ewf_standings))\n\n# A tibble: 6 × 17\n  season_id  season  tier division position team_id team_name played  wins draws\n  &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 S-2011-20… 2011-…     1 FA Wome…        1 T-001-T Arsenal …     14    10     2\n2 S-2011-20… 2011-…     1 FA Wome…        2 T-003-T Birmingh…     14     8     5\n3 S-2011-20… 2011-…     1 FA Wome…        3 T-013-T Everton …     14     7     4\n4 S-2011-20… 2011-…     1 FA Wome…        4 T-016-T Lincoln …     14     6     3\n5 S-2011-20… 2011-…     1 FA Wome…        5 T-006-T Bristol …     14     4     4\n6 S-2011-20… 2011-…     1 FA Wome…        6 T-008-T Chelsea …     14     4     3\n# ℹ 7 more variables: losses &lt;dbl&gt;, goals_for &lt;dbl&gt;, goals_against &lt;dbl&gt;,\n#   goal_difference &lt;dbl&gt;, points &lt;dbl&gt;, point_adjustment &lt;dbl&gt;,\n#   season_outcome &lt;chr&gt;\n\n\n\n\nQuestion:\nHow has team performance evolved over the seasons in the Women’s Super League?\n\n\nHypothesis:\nTeams that have higher average attendance tend to perform better in terms of points and goal difference.\n\n# Data Preparation\newf_matches &lt;- ewf_matches %&gt;%\n  mutate(attendance = as.numeric(gsub(\",\", \"\", attendance))) %&gt;%\n  group_by(season, home_team_id) %&gt;%\n  summarise(avg_attendance = mean(attendance, na.rm = TRUE), .groups = 'drop')\n\n# Merge datasets\nteam_performance &lt;- ewf_standings %&gt;%\n  left_join(ewf_matches, by = c(\"season\", \"team_id\" = \"home_team_id\"))\n\n# Handle missing values\nteam_performance &lt;- team_performance %&gt;%\n  mutate(avg_attendance = ifelse(is.na(avg_attendance), mean(avg_attendance, na.rm = TRUE), avg_attendance))\n\n# Select relevant columns and convert data types if necessary\nteam_performance &lt;- team_performance %&gt;%\n  select(season, team_name, points, goals_for, goals_against, wins, losses, draws, avg_attendance)\n\n# Splitting the data into training and test sets\nset.seed(123)  # For reproducibility\ntrain_index &lt;- createDataPartition(team_performance$points, p = 0.7, list = FALSE)\ntrain_data &lt;- team_performance[train_index, ]\ntest_data &lt;- team_performance[-train_index, ]\n\n# Set up the resampling\nset.seed(123)\ncv_folds &lt;- vfold_cv(train_data, v = 5)\n\n# Define Models\nlinear_reg_model &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\")\n\nrf_model &lt;- rand_forest() %&gt;%\n  set_engine(\"ranger\") %&gt;%\n  set_mode(\"regression\")\n\nsvm_model &lt;- svm_rbf() %&gt;%\n  set_engine(\"kernlab\") %&gt;%\n  set_mode(\"regression\")\n\n# Create Recipe\nteam_recipe &lt;- recipe(points ~ goals_for + goals_against + wins + losses + draws + avg_attendance, data = train_data) %&gt;%\n  step_normalize(all_predictors())\n\n# Set up Workflows\nlinear_reg_workflow &lt;- workflow() %&gt;%\n  add_model(linear_reg_model) %&gt;%\n  add_recipe(team_recipe)\n\nrf_workflow &lt;- workflow() %&gt;%\n  add_model(rf_model) %&gt;%\n  add_recipe(team_recipe)\n\nsvm_workflow &lt;- workflow() %&gt;%\n  add_model(svm_model) %&gt;%\n  add_recipe(team_recipe)\n\n# Train Models Using Cross-Validation\nset.seed(123)\nlinear_reg_results &lt;- fit_resamples(\n  linear_reg_workflow,\n  resamples = cv_folds,\n  metrics = metric_set(rmse, rsq)\n)\n\nset.seed(123)\nrf_results &lt;- fit_resamples(\n  rf_workflow,\n  resamples = cv_folds,\n  metrics = metric_set(rmse, rsq)\n)\n\nset.seed(123)\nsvm_results &lt;- fit_resamples(\n  svm_workflow,\n  resamples = cv_folds,\n  metrics = metric_set(rmse, rsq)\n)\n\n# Collect and Print Metrics\nlinear_reg_metrics &lt;- collect_metrics(linear_reg_results)\nrf_metrics &lt;- collect_metrics(rf_results)\nsvm_metrics &lt;- collect_metrics(svm_results)\n\nprint(\"Linear Regression Metrics\")\n\n[1] \"Linear Regression Metrics\"\n\nprint(linear_reg_metrics)\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   0.935     5 0.319   Preprocessor1_Model1\n2 rsq     standard   0.992     5 0.00443 Preprocessor1_Model1\n\nprint(\"Random Forest Metrics\")\n\n[1] \"Random Forest Metrics\"\n\nprint(rf_metrics)\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   2.44      5 0.127   Preprocessor1_Model1\n2 rsq     standard   0.970     5 0.00429 Preprocessor1_Model1\n\nprint(\"SVM Metrics\")\n\n[1] \"SVM Metrics\"\n\nprint(svm_metrics)\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   3.87      5  0.793  Preprocessor1_Model1\n2 rsq     standard   0.915     5  0.0269 Preprocessor1_Model1\n\n# Visualize Residuals and Predictions\nplot_residuals &lt;- function(results, title) {\n  collect_predictions(results) %&gt;%\n    ggplot(aes(x = .pred, y = .pred - points)) +\n    geom_point(alpha = 0.5) +\n    geom_hline(yintercept = 0, linetype = \"dashed\") +\n    labs(title = title, x = \"Predicted\", y = \"Residuals\") +\n    theme_minimal()\n}\n\n# Function to plot residuals\nplot_residuals &lt;- function(results, title) {\n  results %&gt;%\n    collect_predictions() %&gt;%\n    ggplot(aes(x = .pred, y = .pred - points)) +\n    geom_point(alpha = 0.5) +\n    geom_hline(yintercept = 0, linetype = \"dashed\") +\n    labs(title = title, x = \"Predicted\", y = \"Residuals\") +\n    theme_minimal()\n}\n\n\n\nModel Fitting\n\n# Linear Regression Model\nlinear_reg_model &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\")\n\n# Random Forest Model\nrf_model &lt;- rand_forest() %&gt;%\n  set_engine(\"ranger\") %&gt;%\n  set_mode(\"regression\")\n\n# Support Vector Machine Model\nsvm_model &lt;- svm_rbf() %&gt;%\n  set_engine(\"kernlab\") %&gt;%\n  set_mode(\"regression\")\n# Recipe for preprocessing\nteam_recipe &lt;- recipe(points ~ goals_for + goals_against + wins + losses + draws + avg_attendance, data = train_data) %&gt;%\n  step_normalize(all_predictors())\n# Set up workflows\nlinear_reg_workflow &lt;- workflow() %&gt;%\n  add_model(linear_reg_model) %&gt;%\n  add_recipe(team_recipe)\n\nrf_workflow &lt;- workflow() %&gt;%\n  add_model(rf_model) %&gt;%\n  add_recipe(team_recipe)\n\nsvm_workflow &lt;- workflow() %&gt;%\n  add_model(svm_model) %&gt;%\n  add_recipe(team_recipe)\n# Train and evaluate Linear Regression Model\nset.seed(123)\nlinear_reg_results &lt;- fit_resamples(\n  linear_reg_workflow,\n  resamples = cv_folds,\n  metrics = metric_set(rmse, rsq)\n)\n\n# Train and evaluate Random Forest Model\nset.seed(123)\nrf_results &lt;- fit_resamples(\n  rf_workflow,\n  resamples = cv_folds,\n  metrics = metric_set(rmse, rsq)\n)\n\n# Train and evaluate SVM Model\nset.seed(123)\nsvm_results &lt;- fit_resamples(\n  svm_workflow,\n  resamples = cv_folds,\n  metrics = metric_set(rmse, rsq)\n)\n# Collect metrics\nlinear_reg_metrics &lt;- collect_metrics(linear_reg_results)\nrf_metrics &lt;- collect_metrics(rf_results)\nsvm_metrics &lt;- collect_metrics(svm_results)\n\n# Print metrics\nprint(\"Linear Regression Metrics\")\n\n[1] \"Linear Regression Metrics\"\n\nprint(linear_reg_metrics)\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   0.935     5 0.319   Preprocessor1_Model1\n2 rsq     standard   0.992     5 0.00443 Preprocessor1_Model1\n\nprint(\"Random Forest Metrics\")\n\n[1] \"Random Forest Metrics\"\n\nprint(rf_metrics)\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   2.44      5 0.127   Preprocessor1_Model1\n2 rsq     standard   0.970     5 0.00429 Preprocessor1_Model1\n\nprint(\"SVM Metrics\")\n\n[1] \"SVM Metrics\"\n\nprint(svm_metrics)\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   3.87      5  0.793  Preprocessor1_Model1\n2 rsq     standard   0.915     5  0.0269 Preprocessor1_Model1\n\n\n\n\nModel Selection\nWhile the Linear Regression model has the best performance in terms of both RMSE and R-squared, the choice of the best model should also consider factors beyond just performance metrics. Here’s a detailed rationale for selecting the best model:\n\n\nLinear Regression\n\nPros:\n\nPerformance: The Linear Regression model has the lowest RMSE and the highest R-squared, indicating it has the best predictive performance among the three models.\nInterpretability: Linear Regression is highly interpretable, allowing for clear insights into how each predictor variable affects the outcome. This is crucial for understanding the factors that contribute to team performance in women’s football.\nSimplicity: Linear Regression is simple and computationally efficient, making it easy to implement and understand.\n\n\n\nCons:\n\nAssumptions: Linear Regression relies on several assumptions (linearity, homoscedasticity, independence, and normality of residuals), which might not always hold true in real-world data.\n\n\n\n\nRandom Forest\n\nPros:\n\nPerformance: The Random Forest model also performs well, with a reasonably low RMSE and a high R-squared. It handles non-linear relationships and interactions between variables better than Linear Regression.\nRobustness: Random Forest is robust to outliers and can handle a large number of predictors and complex interactions.\n\n\n\nCons:\n\nInterpretability: Random Forest models are less interpretable compared to Linear Regression. Understanding the contribution of each predictor to the outcome can be more challenging.\nComputational Cost: Random Forests are more computationally intensive, especially with a large number of trees.\n\n\n\n\nSupport Vector Machine (SVM)\n\nPros:\n\nComplex Relationships: SVMs can capture complex, non-linear relationships between the predictors and the outcome.\n\n\n\nCons:\n\nPerformance: The SVM model has the highest RMSE and the lowest R-squared among the three models, indicating it performs the worst in terms of predictive accuracy.\nInterpretability: SVMs are even less interpretable than Random Forests, making it difficult to understand the model’s decisions.\nComputational Cost: SVMs can be computationally expensive, especially with large datasets.\n\n\n\n\nConclusion\nGiven the above considerations, I would select the Linear Regression model as the overall best model. The primary reasons for this choice are its superior performance in terms of RMSE and R-squared, its simplicity, and its high interpretability, which aligns well with the goal of understanding the factors contributing to team performance in women’s football.\n\n\nFinal Model Choice: Linear Regression\n\nExplanation:\n\nPerformance: Best predictive performance with the lowest RMSE and highest R-squared.\nInterpretability: Allows for clear insights into the effect of each predictor on the outcome.\nSimplicity: Easy to implement, understand, and communicate the results.\n\nThis choice ensures that the analysis remains transparent and actionable, providing valuable insights into the factors driving team performance while maintaining high predictive accuracy.\n\n\n\nTest Data Validation\n\n# Load necessary libraries\nlibrary(tidyverse)\nlibrary(tidymodels)\n\n# Load the CSV files\newf_matches &lt;- read_csv(\"data/ewf_matches.csv\")\n\nRows: 2298 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (12): season_id, season, division, match_id, match_name, home_team_id, ...\ndbl   (8): tier, home_team_score, away_team_score, home_team_score_margin, a...\nnum   (1): attendance\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\newf_appearances &lt;- read_csv(\"data/ewf_appearances.csv\")\n\nRows: 4596 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (11): season_id, season, division, match_id, match_name, team_id, team_...\ndbl  (10): tier, home_team, away_team, goals_for, goals_against, goal_differ...\nnum   (1): attendance\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\newf_standings &lt;- read_csv(\"data/ewf_standings.csv\")\n\nRows: 258 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): season_id, season, division, team_id, team_name, season_outcome\ndbl (11): tier, position, played, wins, draws, losses, goals_for, goals_agai...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Data Preparation\newf_matches &lt;- ewf_matches %&gt;%\n  mutate(attendance = as.numeric(gsub(\",\", \"\", attendance))) %&gt;%\n  group_by(season, home_team_id) %&gt;%\n  summarise(avg_attendance = mean(attendance, na.rm = TRUE), .groups = 'drop')\n\n# Merge datasets\nteam_performance &lt;- ewf_standings %&gt;%\n  left_join(ewf_matches, by = c(\"season\", \"team_id\" = \"home_team_id\"))\n\n# Handle missing values\nteam_performance &lt;- team_performance %&gt;%\n  mutate(avg_attendance = ifelse(is.na(avg_attendance), mean(avg_attendance, na.rm = TRUE), avg_attendance))\n\n# Select relevant columns and convert data types if necessary\nteam_performance &lt;- team_performance %&gt;%\n  select(season, team_name, points, goals_for, goals_against, wins, losses, draws, avg_attendance)\n\n# Splitting the data into training and test sets\nset.seed(123)  # For reproducibility\ntrain_index &lt;- createDataPartition(team_performance$points, p = 0.7, list = FALSE)\ntrain_data &lt;- team_performance[train_index, ]\ntest_data &lt;- team_performance[-train_index, ]\n# Define the Linear Regression Model\nlinear_reg_model &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\")\n\n# Create Recipe\nteam_recipe &lt;- recipe(points ~ goals_for + goals_against + wins + losses + draws + avg_attendance, data = train_data) %&gt;%\n  step_normalize(all_predictors())\n\n# Set up Workflow\nlinear_reg_workflow &lt;- workflow() %&gt;%\n  add_model(linear_reg_model) %&gt;%\n  add_recipe(team_recipe)\n\n# Fit the Model\nlinear_reg_fit &lt;- linear_reg_workflow %&gt;%\n  fit(data = train_data)\n# Make Predictions on Test Data\ntest_predictions &lt;- predict(linear_reg_fit, new_data = test_data) %&gt;%\n  bind_cols(test_data)\n\n# Evaluate Model Performance\ntest_metrics &lt;- test_predictions %&gt;%\n  metrics(truth = points, estimate = .pred)\n\n# Print Test Metrics\nprint(test_metrics)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard       0.256\n2 rsq     standard       1.00 \n3 mae     standard       0.208\n\n# Plot Residuals\ntest_residuals_plot &lt;- test_predictions %&gt;%\n  ggplot(aes(x = .pred, y = .pred - points)) +\n  geom_point(alpha = 0.5) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  labs(title = \"Linear Regression Residuals on Test Data\", x = \"Predicted\", y = \"Residuals\") +\n  theme_minimal()\n\nprint(test_residuals_plot)"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "library(\"dslabs\")\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#look at help file for gapminder data\nhelp(gapminder)\n\n#get an overview of data structure\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n#get a summary of data\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n#determine the type of object gapminder is\nclass(gapminder)\n\n[1] \"data.frame\"\n\n# Assign only African countries to a new object/variable called africadata\nafricadata &lt;- subset(gapminder, continent == \"Africa\")\n\n# Run str and summary on the new object\nstr(africadata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n# Create two new objects with selected columns from africadata\nafricadata_subset1 &lt;- africadata[, c(\"infant_mortality\", \"life_expectancy\")]\nafricadata_subset2 &lt;- africadata[, c(\"population\", \"life_expectancy\")]\n\n# Run str and summary on both new objects\nstr(africadata_subset1)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(africadata_subset1)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\nstr(africadata_subset2)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(africadata_subset2)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51                         \n\n# Plotting\n# Plot 1: Life expectancy vs. Infant mortality\nplot(africadata_subset1$infant_mortality, africadata_subset1$life_expectancy,\n     xlab = \"Infant Mortality\", ylab = \"Life Expectancy\",\n     main = \"Life Expectancy vs. Infant Mortality\")\n\n\n\n\n\n\n\n# Plot 2: Life expectancy vs. Population (log scale on x-axis)\nplot(africadata_subset2$population, africadata_subset2$life_expectancy,\n     xlab = \"Population\", ylab = \"Life Expectancy\",\n     main = \"Life Expectancy vs. Population (log scale)\",\n     log = \"x\")\n\n\n\n\n\n\n\n# More data processing\n# Extract data for the year 2000 from africadata\nafricadata_2000 &lt;- subset(africadata, year == 2000)\n\n# Check structure and summary of africadata_2000\nstr(africadata_2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(africadata_2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n# More plotting for the year 2000 data\n# Repeat plots for 2000 data\nplot(africadata_2000$infant_mortality, africadata_2000$life_expectancy,\n     xlab = \"Infant Mortality\", ylab = \"Life Expectancy\",\n     main = \"Life Expectancy vs. Infant Mortality (Year 2000)\")\n\n\n\n\n\n\n\nplot(africadata_2000$population, africadata_2000$life_expectancy,\n     xlab = \"Population\", ylab = \"Life Expectancy\",\n     main = \"Life Expectancy vs. Population (log scale, Year 2000)\",\n     log = \"x\")\n\n\n\n\n\n\n\n# Simple model fits\n# Fit 1: Life expectancy ~ Infant mortality\nfit1 &lt;- lm(life_expectancy ~ infant_mortality, data = africadata_2000)\nsummary(fit1)\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = africadata_2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\n# Fit 2: Life expectancy ~ Population\nfit2 &lt;- lm(life_expectancy ~ population, data = africadata_2000)\nsummary(fit2)\n\n\nCall:\nlm(formula = life_expectancy ~ population, data = africadata_2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n\n#Contribution from Vinayak Revisanker\n\ndata(\"mice_weights\") \n\nWarning in data(\"mice_weights\"): data set 'mice_weights' not found\n\nstr(mice_weights)\n\n'data.frame':   780 obs. of  7 variables:\n $ body_weight : num  27.6 23 28.7 32.6 28.6 ...\n $ bone_density: num  0.616 0.769 0.684 0.644 0.53 ...\n $ percent_fat : num  7.26 4.95 6.02 9.54 6.99 ...\n $ sex         : Factor w/ 2 levels \"F\",\"M\": 1 1 1 1 1 1 1 1 1 1 ...\n $ diet        : Factor w/ 2 levels \"chow\",\"hf\": 1 1 1 1 1 1 1 1 1 1 ...\n $ gen         : Factor w/ 5 levels \"4\",\"7\",\"8\",\"9\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ litter      : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n\nsummary(mice_weights)\n\n  body_weight     bone_density     percent_fat     sex       diet     gen     \n Min.   :18.13   Min.   :0.2708   Min.   : 2.552   F:398   chow:394   4 : 97  \n 1st Qu.:28.09   1st Qu.:0.4888   1st Qu.: 5.566   M:382   hf  :386   7 :195  \n Median :32.98   Median :0.5643   Median : 8.276                      8 :193  \n Mean   :34.08   Mean   :0.5697   Mean   : 8.594                      9 : 97  \n 3rd Qu.:39.37   3rd Qu.:0.6373   3rd Qu.:10.926                      11:198  \n Max.   :65.15   Max.   :0.9980   Max.   :22.154                              \n                 NA's   :4        NA's   :4                                   \n litter \n 1:442  \n 2:338  \n        \n        \n        \n        \n        \n\nmice_liter1_data &lt;- subset(mice_weights, litter == 1)\n\n\n# Run str and summary on texasdata\nstr(mice_liter1_data)\n\n'data.frame':   442 obs. of  7 variables:\n $ body_weight : num  27.6 23 28.7 32.6 28.6 ...\n $ bone_density: num  0.616 0.769 0.684 0.644 0.53 ...\n $ percent_fat : num  7.26 4.95 6.02 9.54 6.99 ...\n $ sex         : Factor w/ 2 levels \"F\",\"M\": 1 1 1 1 1 1 1 1 1 1 ...\n $ diet        : Factor w/ 2 levels \"chow\",\"hf\": 1 1 1 1 1 1 1 1 1 1 ...\n $ gen         : Factor w/ 5 levels \"4\",\"7\",\"8\",\"9\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ litter      : Factor w/ 2 levels \"1\",\"2\": 1 1 1 1 1 1 1 1 1 1 ...\n\nsummary(mice_liter1_data)\n\n  body_weight     bone_density     percent_fat     sex       diet     gen     \n Min.   :19.16   Min.   :0.2708   Min.   : 2.595   F:224   chow:246   4 : 50  \n 1st Qu.:27.94   1st Qu.:0.5016   1st Qu.: 5.654   M:218   hf  :196   7 : 98  \n Median :33.36   Median :0.5769   Median : 8.048                      8 : 97  \n Mean   :34.37   Mean   :0.5792   Mean   : 8.486                      9 : 97  \n 3rd Qu.:39.43   3rd Qu.:0.6463   3rd Qu.:10.647                      11:100  \n Max.   :65.15   Max.   :0.9679   Max.   :22.154                              \n                 NA's   :1        NA's   :1                                   \n litter \n 1:442  \n 2:  0  \n        \n        \n        \n        \n        \n\n# Create  new objects with selected columns from mice_liter1_data_subset1 and mice_liter1_data_subset2\nmice_liter1_data_subset1 &lt;- mice_liter1_data[, c(\"sex\", \"bone_density\")]\nmice_liter1_data_subset2 &lt;- mice_liter1_data[, c(\"diet\", \"body_weight\")]\n# Run str and summary on both new objects\nstr(mice_liter1_data_subset1)\n\n'data.frame':   442 obs. of  2 variables:\n $ sex         : Factor w/ 2 levels \"F\",\"M\": 1 1 1 1 1 1 1 1 1 1 ...\n $ bone_density: num  0.616 0.769 0.684 0.644 0.53 ...\n\nsummary(mice_liter1_data_subset1)\n\n sex      bone_density   \n F:224   Min.   :0.2708  \n M:218   1st Qu.:0.5016  \n         Median :0.5769  \n         Mean   :0.5792  \n         3rd Qu.:0.6463  \n         Max.   :0.9679  \n         NA's   :1       \n\nstr(mice_liter1_data_subset2)\n\n'data.frame':   442 obs. of  2 variables:\n $ diet       : Factor w/ 2 levels \"chow\",\"hf\": 1 1 1 1 1 1 1 1 1 1 ...\n $ body_weight: num  27.6 23 28.7 32.6 28.6 ...\n\nsummary(mice_liter1_data_subset2)\n\n   diet      body_weight   \n chow:246   Min.   :19.16  \n hf  :196   1st Qu.:27.94  \n            Median :33.36  \n            Mean   :34.37  \n            3rd Qu.:39.43  \n            Max.   :65.15  \n\n# Plotting\n# Plot 1: sex vs. bone_density\nplot(mice_liter1_data_subset1$sex, mice_liter1_data_subset1$bone_density,\n     xlab = \"sex\", ylab = \"bone_density\",\n     main = \"Gender and Bone density\")\n\n\n\n\n\n\n\n# Plot 2: Life expectancy vs. Population (log scale on x-axis)\nplot(mice_liter1_data_subset2$diet, mice_liter1_data_subset2$body_weight,\n     xlab = \"diet\", ylab = \"weight\",\n     main = \"Diet and Weight \",\n     log = \"x\")\n\n\n\n\n\n\n\n# Simple model fits\n# Fit 1: body_weight ~ percent_fat\nfit1 &lt;- lm(body_weight ~ percent_fat, data = mice_liter1_data)\nsummary(fit1)\n\n\nCall:\nlm(formula = body_weight ~ percent_fat, data = mice_liter1_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-16.0576  -4.7657  -0.8055   4.6897  18.1549 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 21.33901    0.73578   29.00   &lt;2e-16 ***\npercent_fat  1.53482    0.07969   19.26   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.087 on 439 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.458, Adjusted R-squared:  0.4567 \nF-statistic: 370.9 on 1 and 439 DF,  p-value: &lt; 2.2e-16\n\n# Fit 2: body_weight ~ bone_density\nfit2 &lt;- lm(body_weight ~ bone_density, data = mice_liter1_data)\nsummary(fit2)\n\n\nCall:\nlm(formula = body_weight ~ bone_density, data = mice_liter1_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-16.4178  -5.7730  -0.5509   5.0720  29.5284 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)    19.181      1.898  10.107  &lt; 2e-16 ***\nbone_density   26.216      3.215   8.154 3.72e-15 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.705 on 439 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.1315,    Adjusted R-squared:  0.1296 \nF-statistic: 66.49 on 1 and 439 DF,  p-value: 3.721e-15"
  },
  {
    "objectID": "tidytuesday-exercise/readme (1).html",
    "href": "tidytuesday-exercise/readme (1).html",
    "title": "English Women’s Football",
    "section": "",
    "text": "Thanks to Rob Clapp for the The English Women’s Football (EWF) Database, May 2024 dataset this week, and h/t Data is Plural. The dataset lists the date, teams, score, attendance, division, tier, and season of each match, as well as each season’s final standings. Rob took inspiration from the Fjelstul English Football Database, a similarly structured dataset that covers men’s professional football since 1888.\n\nThe English Women’s Football (EWF) Database is an open database of matches played in the top tiers of women’s football in England. It covers all matches played since the 2011 season for the highest division (the Women’s Super League) and since the 2014 season for the second-highest division (the Women’s Championship).\n\nThe dataset contains three datasets:\n\newf_matches contains all matches that have been played and has one observation per match per season.\newf_appearances contains all appearances by a team and has one observation per team per match per season.\newf_standings contains all end-of-the-season division tables and has one observation per team per season.\n\n\nThe data in the English Women’s Football (EWF) Database has been collected from multiple online sources and has been cross-referenced to confirm its accuracy. Information in the database is also cross-referenced with itself to ensure consistency. For example, that a team’s goals_for at the end of the season in ewf_standings is equal to the number of goals they have scored across all games played in ewf_matches.\n\n\nEach team has been given a unique ID in the format of T-###-T. This is to enable the tracking of team performance across multiple seasons, as most teams have changed their name over time. For example, Arsenal Ladies became Arsenal Women before the start of the 2017-2018 season, but the same ID is used for them throughout the database (T-001-T). The name of the team in each dataset is the name of the team at the time. Any generic terms such as ‘Football Club’ or ‘F.C.’ have been removed. Reference to ‘Women’ or ‘Ladies’ is included in the team name, where applicable, to indicate changes that have occurred. However, most teams do not explicitly reference ‘Women’ or ‘Ladies’ in their name unless it is to distinguish between the male and female teams.\n\n\n\n# Option 1: tidytuesdayR package \n## install.packages(\"tidytuesdayR\")\n\ntuesdata &lt;- tidytuesdayR::tt_load('2024-07-16')\n## OR\ntuesdata &lt;- tidytuesdayR::tt_load(2024, week = 29)\n\newf_appearances &lt;- tuesdata$ewf_appearances\newf_matches &lt;- tuesdata$ewf_matches\newf_standings &lt;- tuesdata$ewf_standings\n\n# Option 2: Read directly from GitHub\n\newf_appearances &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-16/ewf_appearances.csv')\newf_matches &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-16/ewf_matches.csv')\newf_standings &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-16/ewf_standings.csv')\n\n\n\n\nExplore the data, watching out for interesting relationships. We would like to emphasize that you should not draw conclusions about causation in the data. There are various moderating variables that affect all data, many of which might not have been captured in these datasets. As such, our suggestion is to use the data provided to practice your data tidying and plotting techniques, and to consider for yourself what nuances might underlie these relationships.\nCreate a visualization, a model, a shiny app, or some other piece of data-science-related output, using R or another programming language.\nShare your output and the code used to generate it on social media with the #TidyTuesday hashtag."
  },
  {
    "objectID": "tidytuesday-exercise/readme (1).html#the-data",
    "href": "tidytuesday-exercise/readme (1).html#the-data",
    "title": "English Women’s Football",
    "section": "",
    "text": "# Option 1: tidytuesdayR package \n## install.packages(\"tidytuesdayR\")\n\ntuesdata &lt;- tidytuesdayR::tt_load('2024-07-16')\n## OR\ntuesdata &lt;- tidytuesdayR::tt_load(2024, week = 29)\n\newf_appearances &lt;- tuesdata$ewf_appearances\newf_matches &lt;- tuesdata$ewf_matches\newf_standings &lt;- tuesdata$ewf_standings\n\n# Option 2: Read directly from GitHub\n\newf_appearances &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-16/ewf_appearances.csv')\newf_matches &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-16/ewf_matches.csv')\newf_standings &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-16/ewf_standings.csv')"
  },
  {
    "objectID": "tidytuesday-exercise/readme (1).html#how-to-participate",
    "href": "tidytuesday-exercise/readme (1).html#how-to-participate",
    "title": "English Women’s Football",
    "section": "",
    "text": "Explore the data, watching out for interesting relationships. We would like to emphasize that you should not draw conclusions about causation in the data. There are various moderating variables that affect all data, many of which might not have been captured in these datasets. As such, our suggestion is to use the data provided to practice your data tidying and plotting techniques, and to consider for yourself what nuances might underlie these relationships.\nCreate a visualization, a model, a shiny app, or some other piece of data-science-related output, using R or another programming language.\nShare your output and the code used to generate it on social media with the #TidyTuesday hashtag."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About Me",
    "section": "",
    "text": "Tim Harrison"
  },
  {
    "objectID": "aboutme.html#personal-profile",
    "href": "aboutme.html#personal-profile",
    "title": "About Me",
    "section": "Personal Profile",
    "text": "Personal Profile\nI am a devoted husband and father of three, eagerly anticipating the arrival of our fourth child. Our household is also home to two cats and a lovable dog. Prior to pursuing my current academic endeavor, I served in the Marine Corps as an Explosive Ordnance Disposal Technician, culminating my service as a Chief Warrant Officer 2."
  },
  {
    "objectID": "aboutme.html#professional-background",
    "href": "aboutme.html#professional-background",
    "title": "About Me",
    "section": "Professional Background",
    "text": "Professional Background\nMy academic journey led me to specialize in Statistics and Data Science, with a concentration in Actuarial Science, complemented by a certification in Business Analytics from UTSA. Having graduated just last year, I embarked on a fulfilling career path. Following an enriching internship experience at USAA, I was offered a full-time role as a Credit Risk Analyst. My primary focus lies in the realm of auto loans, although I also manage other secured retail banking loans. Day in and day out, I harness the power of SQL within SAS to identify opportunities for optimizing strategies. Additionally, I collaborate closely with Tableau dashboard developers, facilitating seamless communication of business requirements, data query provision, and rigorous QA inspections on the generated Tableau output."
  },
  {
    "objectID": "aboutme.html#personal-interests-and-activities",
    "href": "aboutme.html#personal-interests-and-activities",
    "title": "About Me",
    "section": "Personal Interests and Activities",
    "text": "Personal Interests and Activities\nA tidbit about me: my international travels outweigh my domestic adventures within the United States. During my leisure hours, I find solace in maintaining our home, indulging in activities like lawn care, barbecuing, car detailing, and the gratifying task of pressure washing our driveway."
  },
  {
    "objectID": "aboutme.html#additional-resource",
    "href": "aboutme.html#additional-resource",
    "title": "About Me",
    "section": "Additional Resource",
    "text": "Additional Resource\nFor a deeper dive into the distribution of FICO scores within the US, check out this informative video: Distribution of FICO Scores within the US"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html",
    "href": "cdcdata-exercise/cdcdata-exercise.html",
    "title": "CDCDATA-Exercise",
    "section": "",
    "text": "# Load necessary libraries\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Read the CSV file\nstroke &lt;- read.csv(\"Stroke.csv\")\n\n# Removing columns 11, 12, 17, 18, and 19 to clean the data and make it more useful for the exercise\nstroke &lt;- stroke %&gt;% select(-c(Data_Value_Footnote_Symbol, Data_Value_Footnote, TopicID, LocationID, Location.1))\n#only keeping state level data\nstroke &lt;- stroke %&gt;% filter(GeographicLevel %in% c(\"State\"))\n\n# Verify the changes\ncolnames(stroke)\n\n [1] \"Year\"                    \"LocationAbbr\"           \n [3] \"LocationDesc\"            \"GeographicLevel\"        \n [5] \"DataSource\"              \"Class\"                  \n [7] \"Topic\"                   \"Data_Value\"             \n [9] \"Data_Value_Unit\"         \"Data_Value_Type\"        \n[11] \"StratificationCategory1\" \"Stratification1\"        \n[13] \"StratificationCategory2\" \"Stratification2\"        \n\n# View the first few rows to check the result\nhead(stroke)\n\n  Year LocationAbbr LocationDesc GeographicLevel DataSource\n1 2013           AK       Alaska           State       NVSS\n2 2013           AK       Alaska           State       NVSS\n3 2013           AK       Alaska           State       NVSS\n4 2013           AK       Alaska           State       NVSS\n5 2013           AK       Alaska           State       NVSS\n6 2013           AK       Alaska           State       NVSS\n                    Class            Topic Data_Value        Data_Value_Unit\n1 Cardiovascular Diseases Stroke Mortality       70.3 per 100,000 population\n2 Cardiovascular Diseases Stroke Mortality       74.2 per 100,000 population\n3 Cardiovascular Diseases Stroke Mortality       78.3 per 100,000 population\n4 Cardiovascular Diseases Stroke Mortality       69.5 per 100,000 population\n5 Cardiovascular Diseases Stroke Mortality       77.0 per 100,000 population\n6 Cardiovascular Diseases Stroke Mortality       63.1 per 100,000 population\n                    Data_Value_Type StratificationCategory1 Stratification1\n1 Age-adjusted, 3-year Average Rate                  Gender         Overall\n2 Age-adjusted, 3-year Average Rate                  Gender         Overall\n3 Age-adjusted, 3-year Average Rate                  Gender            Male\n4 Age-adjusted, 3-year Average Rate                  Gender          Female\n5 Age-adjusted, 3-year Average Rate                  Gender            Male\n6 Age-adjusted, 3-year Average Rate                  Gender          Female\n  StratificationCategory2 Stratification2\n1          Race/Ethnicity           White\n2          Race/Ethnicity         Overall\n3          Race/Ethnicity         Overall\n4          Race/Ethnicity         Overall\n5          Race/Ethnicity           White\n6          Race/Ethnicity           White\n\n# Unique values in column 4 (GeographicLevel)\nunique_geographic_level &lt;- unique(stroke$GeographicLevel)\nprint(unique_geographic_level)\n\n[1] \"State\"\n\n# Unique values in column 5 (DataSource)\nunique_data_source &lt;- unique(stroke$DataSource)\nprint(unique_data_source)\n\n[1] \"NVSS\"\n\n# Unique values in column 6 (Class)\nunique_class &lt;- unique(stroke$Class)\nprint(unique_class)\n\n[1] \"Cardiovascular Diseases\"\n\n# Unique values in column 7 (Topic)\nunique_topic &lt;- unique(stroke$Topic)\nprint(unique_topic)\n\n[1] \"Stroke Mortality\"\n\n# Unique values in column 9 (Data_Value_Unit)\nunique_data_value_unit &lt;- unique(stroke$Data_Value_Unit)\nprint(unique_data_value_unit)\n\n[1] \"per 100,000 population\"\n\n# Unique values in column 10 (Data_Value_Type)\nunique_data_value_type &lt;- unique(stroke$Data_Value_Type)\nprint(unique_data_value_type)\n\n[1] \"Age-adjusted, 3-year Average Rate\"\n\n# Unique values in column 14 (Stratification1)\nunique_stratification1 &lt;- unique(stroke$Stratification1)\nprint(unique_stratification1)\n\n[1] \"Overall\" \"Male\"    \"Female\" \n\n# Unique values in column 16 (Stratification2)\nunique_stratification2 &lt;- unique(stroke$Stratification2)\nprint(unique_stratification2)\n\n[1] \"White\"                              \"Overall\"                           \n[3] \"Black\"                              \"Hispanic\"                          \n[5] \"Asian and Pacific Islander\"         \"American Indian and Alaskan Native\"\n\n# GeographicLevel\ngeo_level_summary &lt;- stroke %&gt;%\n  group_by(GeographicLevel) %&gt;%\n  summarise(count = n(), percentage = (n() / nrow(stroke)) * 100)\nprint(geo_level_summary)\n\n# A tibble: 1 × 3\n  GeographicLevel count percentage\n  &lt;chr&gt;           &lt;int&gt;      &lt;dbl&gt;\n1 State            1008        100\n\n# DataSource\ndata_source_summary &lt;- stroke %&gt;%\n  group_by(DataSource) %&gt;%\n  summarise(count = n(), percentage = (n() / nrow(stroke)) * 100)\nprint(data_source_summary)\n\n# A tibble: 1 × 3\n  DataSource count percentage\n  &lt;chr&gt;      &lt;int&gt;      &lt;dbl&gt;\n1 NVSS        1008        100\n\n# Class\nclass_summary &lt;- stroke %&gt;%\n  group_by(Class) %&gt;%\n  summarise(count = n(), percentage = (n() / nrow(stroke)) * 100)\nprint(class_summary)\n\n# A tibble: 1 × 3\n  Class                   count percentage\n  &lt;chr&gt;                   &lt;int&gt;      &lt;dbl&gt;\n1 Cardiovascular Diseases  1008        100\n\n# Topic\ntopic_summary &lt;- stroke %&gt;%\n  group_by(Topic) %&gt;%\n  summarise(count = n(), percentage = (n() / nrow(stroke)) * 100)\nprint(topic_summary)\n\n# A tibble: 1 × 3\n  Topic            count percentage\n  &lt;chr&gt;            &lt;int&gt;      &lt;dbl&gt;\n1 Stroke Mortality  1008        100\n\n# Data_Value_Unit\ndata_value_unit_summary &lt;- stroke %&gt;%\n  group_by(Data_Value_Unit) %&gt;%\n  summarise(count = n(), percentage = (n() / nrow(stroke)) * 100)\nprint(data_value_unit_summary)\n\n# A tibble: 1 × 3\n  Data_Value_Unit        count percentage\n  &lt;chr&gt;                  &lt;int&gt;      &lt;dbl&gt;\n1 per 100,000 population  1008        100\n\n# Data_Value_Type\ndata_value_type_summary &lt;- stroke %&gt;%\n  group_by(Data_Value_Type) %&gt;%\n  summarise(count = n(), percentage = (n() / nrow(stroke)) * 100)\nprint(data_value_type_summary)\n\n# A tibble: 1 × 3\n  Data_Value_Type                   count percentage\n  &lt;chr&gt;                             &lt;int&gt;      &lt;dbl&gt;\n1 Age-adjusted, 3-year Average Rate  1008        100\n\n# StratificationCategory1\nstrat_cat1_summary &lt;- stroke %&gt;%\n  group_by(Stratification1) %&gt;%\n  summarise(count = n(), percentage = (n() / nrow(stroke)) * 100)\nprint(strat_cat1_summary)\n\n# A tibble: 3 × 3\n  Stratification1 count percentage\n  &lt;chr&gt;           &lt;int&gt;      &lt;dbl&gt;\n1 Female            280       27.8\n2 Male              280       27.8\n3 Overall           448       44.4\n\n# StratificationCategory2\nstrat_cat2_summary &lt;- stroke %&gt;%\n  group_by(Stratification2) %&gt;%\n  summarise(count = n(), percentage = (n() / nrow(stroke)) * 100)\nprint(strat_cat2_summary)\n\n# A tibble: 6 × 3\n  Stratification2                    count percentage\n  &lt;chr&gt;                              &lt;int&gt;      &lt;dbl&gt;\n1 American Indian and Alaskan Native   168       16.7\n2 Asian and Pacific Islander           168       16.7\n3 Black                                168       16.7\n4 Hispanic                             168       16.7\n5 Overall                              168       16.7\n6 White                                168       16.7\n\n# Summary statistics for Data_Value\ndata_value_summary &lt;- stroke %&gt;%\n  summarise(mean = mean(Data_Value, na.rm = TRUE), \n            sd = sd(Data_Value, na.rm = TRUE), \n            min = min(Data_Value, na.rm = TRUE), \n            max = max(Data_Value, na.rm = TRUE))\nprint(data_value_summary)\n\n      mean       sd  min max\n1 72.41125 23.02407 24.1 226\n\n# Plotting the distribution of Data_Value\nggplot(stroke, aes(x = Data_Value)) +\n  geom_histogram(binwidth = 1, fill = 'blue', color = 'black') +\n  labs(title = 'Distribution of Data_Value', x = 'Data_Value', y = 'Frequency')\n\nWarning: Removed 306 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\nThis section is contributed by Brody Johnson.\nSummary stats of the variable “data_value” in the original data set.\n\ndata_value_summary\n\n      mean       sd  min max\n1 72.41125 23.02407 24.1 226\n\n\nCreating the synthetic data set. All in all, the summary statistics look appear to be very similar to that of the original data.\n\nset.seed(200)\nsynthetic_data &lt;- rnorm(1000, mean = data_value_summary$mean, sd = data_value_summary$sd)\nprint(summary(synthetic_data))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  3.818  57.454  72.493  72.773  87.032 172.061 \n\nprint(sd(synthetic_data))\n\n[1] 22.90284\n\n\n\nhist(synthetic_data, breaks=100)\n\n\n\n\n\n\n\n\nSummary stats of the variable “Stratification1” in the original data set.\n\nstrat_cat1_summary\n\n# A tibble: 3 × 3\n  Stratification1 count percentage\n  &lt;chr&gt;           &lt;int&gt;      &lt;dbl&gt;\n1 Female            280       27.8\n2 Male              280       27.8\n3 Overall           448       44.4\n\n\nCreating synthetic data for stratificiation1.\n\n#Proportions of the stratifications\nproportions = c(strat_cat1_summary$percentage[1], \n                strat_cat1_summary$percentage[2],\n                strat_cat1_summary$percentage[3])\n\n#Creating synthetic data\nstrat1_syn_data = sample(x = 1:3, size = 1000, replace = TRUE, prob = proportions)\nstrat1_syn_data = factor(strat1_syn_data, levels=1:3, labels=c(strat_cat1_summary$Stratification1[1], strat_cat1_summary$Stratification1[2], strat_cat1_summary$Stratification1[3])) #relabeling factors\ntable(strat1_syn_data)\n\nstrat1_syn_data\n Female    Male Overall \n    262     299     439"
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Tim Harrison Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Assignment 2",
    "section": "",
    "text": "The structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Assignment 2",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Assignment 2",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nI added hair color and BMI. ## Questions/Hypotheses to be addressed State the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Assignment 2",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Assignment 2",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Assignment 2",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Assignment 2",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Assignment 2",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Assignment 2",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871\n\n\n\n\n\n\n\n\nExample ?@tbl-resulttable3 shows a summary of a second linear model fit.\n::: {#tbl-resulttable3 .cell tbl-cap=’ 2nd Linear model fit table.’} ::: {.cell-output-display}\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n172.769240\n18.84399\n9.1683981\n0.0002588\n\n\nHairBrown\n-9.736809\n14.89645\n-0.6536329\n0.5422103\n\n\nHairRed\n11.750882\n18.04451\n0.6512166\n0.5436460\n\n\nBMI\n-20.828432\n46.37174\n-0.4491622\n0.6721139\n\n\n\n::: :::"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Assignment 2",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Assignment 2",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Assignment 2",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Tim Harrison Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Tim Harrison Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Tim Harrison Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Tim Harrison Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Tim Harrison Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Tim Harrison Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  }
]